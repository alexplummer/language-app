{"version":3,"sources":["app.js","helperFunctions.js","verbs.js","termCreation.js","termInteraction.js","viewCreation.js","queryInteraction.js"],"names":["app","ready","fn","document","readyState","addEventListener","cl","log","console","checkSameDay","todaysDate","getTodaysDate","storedDate","Array","from","ops","storedData","dateOpened","arrayCheck","addDay","newDay","todayDate","day","Date","getDate","month","getMonth","push","getTimeComplete","timeComplete","hour","getHours","minute","getMinutes","second","getSeconds","arr1","arr2","JSON","stringify","resetData","querySelector","e","preventDefault","localforage","clear","clickListener","elements","clickFunction","i","length","pickRandom","objectList","keys","Object","pickedTerm","Math","random","appData","terms","verb_1","term","definition","support","verb_2","verb_3","verb_4","verb_5","getListOfTerms","j","listOfTerms","scannedTerms","dataLength","displayedTerms","firstTime","undefined","includes","viewedLength","viewedTerms","viewedSorted","sort","a","b","hasOwnProperty","setItem","updateDataCount","dataType","termsToAdjust","baseValue","dataTypeHolder","value","count","revealedBtnHandler","revealBtn","querySelectorAll","classList","contains","parentNode","innerHTML","countHolder","definitionWrapper","definitionHolder","parseInt","remove","dataCount","revealedTermCount","createRevealTimer","revealCountdowns","minutes","seconds","startTime","timerEnded","timeSinceStart","nowTime","abs","getRemainingMinutes","getRemainingSeconds","timeout","checkCount","setTimeout","timeoutCall","buttonTimer","displayedMinutes","displayedSeconds","hiddenZero","setAttribute","add","viewCreate","termsToCreate","viewHTML","termValue","definitionValue","supportValue","revealCounter","viewsCount","newHolder","container","revealTerm","addHearts","heartHolder","heartsHTML","hearts","points","setScore","scoreHolder","score","createNewQuery","queryTerms","randomTerm","correctTerms","incorrectTerms","buildQuery","queryWrapper","queryHolder","querySubmit","resultHolder","heartCount","queryInput","toUpperCase","winCase","loseCase","correct","gameWon","placeholder","removeChild","getElementsByTagName","debug","checkFirstTime","then","numberOfKeys","initialise","catch","err","appBuildHandler","getItem","checkData","retrievedData","pickedTerms","dailyTerms","ops$1"],"mappings":";;AAAA,IAAIA,MAAO,YAAY;AACvB;;ACAA;AACA;;AAMA,aAASC,KAAT,CAAeC,EAAf,EAAmB;AACf,YAAIC,SAASC,UAAT,IAAuB,SAA3B,EAAsC;AAClCF;AACH,SAFD,MAEO;AACHC,qBAASE,gBAAT,CAA0B,kBAA1B,EAA8CH,EAA9C;AACH;AACJ;;ADDD;ACIA,aAASI,EAAT,CAAYC,GAAZ,EAAiB;AACbC,gBAAQD,GAAR,CAAYA,GAAZ;AACH;;AAED;AAMA,aAASE,YAAT,GAAwB;;AAEpB,YAAIC,aAAaC,eAAjB;AACA,YAAIC,aAAa,EAAjB;;ADNA;ACSAA,qBAAaC,MAAMC,IAAN,CAAWC,MAAIC,UAAJD,CAAeE,UAA1B,CAAb;;ADNA;ACSA,YAAIC,WAAWR,UAAX,EAAuBE,UAAvB,MAAuC,IAA3C,EAAiD;AAC7C,gBAAIG,MAAII,MAAJJ,KAAe,IAAnB,EAAyB;AAAEA,sBAAIC,UAAJD,CAAeK,MAAfL,GAAwB,IAAxBA;AAA8B,aAAzD,MACK;AAAEA,sBAAIC,UAAJD,CAAeK,MAAfL,GAAwB,KAAxBA;AAA+B;AACzC;ADPD;ACIA,aAKK;AACDA,sBAAIC,UAAJD,CAAeK,MAAfL,GAAwB,IAAxBA;AACH;AACJ;;ADND;ACSA,aAASJ,aAAT,GAAyB;;ADNrB;ACSA,YAAIU,YAAY,EAAhB;AACA,YAAIC,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,YAAIC,QAAQ,IAAIF,IAAJ,GAAWG,QAAX,EAAZ;;AAEAL,kBAAUM,IAAV,CAAe,CAACL,GAAD,EAAMG,KAAN,CAAf;;AAEA,eAAOJ,SAAP;AACH;;ADND;ACSA,aAASO,eAAT,GAA2B;;ADNvB;ACSA,YAAIC,eAAe,EAAnB;AACA,YAAIP,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,YAAIC,QAAQ,IAAIF,IAAJ,GAAWG,QAAX,EAAZ;AACA,YAAII,OAAO,IAAIP,IAAJ,GAAWQ,QAAX,EAAX;AACA,YAAIC,SAAS,IAAIT,IAAJ,GAAWU,UAAX,EAAb;AACA,YAAIC,SAAS,IAAIX,IAAJ,GAAWY,UAAX,EAAb;;AAEAN,qBAAaF,IAAb,CAAkB,CAACL,GAAD,EAAMG,KAAN,EAAaK,IAAb,EAAmBE,MAAnB,EAA2BE,MAA3B,CAAlB;;AAEA,eAAOL,YAAP;AACH;;ADND;ACSA,aAASX,UAAT,CAAoBkB,IAApB,EAA0BC,IAA1B,EAAgC;;ADN5B;ACSA,YAAIC,KAAKC,SAAL,CAAeH,IAAf,KAAwBE,KAAKC,SAAL,CAAeF,IAAf,CAA5B,EAAkD;AAC9C,mBAAO,IAAP;AACH;ADPD;ACSA,eAAO,KAAP;AACH;;ADND;ACSA,aAASG,SAAT,GAAqB;;AAEjBrC,iBAASsC,aAAT,CAAuB,QAAvB,EAAiCpC,gBAAjC,CAAkD,OAAlD,EAA2D,UAACqC,CAAD,EAAO;AAC9DA,cAAEC,cAAF;AACAC,wBAAYC,KAAZ;AACAvC,eAAG,WAAH;AACH,SAJD;AAKH;;ADND;ACSA,aAASwC,aAAT,CAAuBC,QAAvB,EAAiCC,aAAjC,EAAgD;AAAA,mCAEnCC,CAFmC;AAGxCF,qBAASE,CAAT,EAAY5C,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAAE2C,8BAAcC,CAAd;AAAkB,aAAhE;AAHwC;;AAE5C,aAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AAAA,kBAAjCA,CAAiC;AAEzC;AACJ;;ADND;ACSA,aAASE,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,YAAIC,OAAOC,OAAOD,IAAP,CAAYD,UAAZ,CAAX;AAAA,YACIG,aAAaF,KAAKA,KAAKH,MAAL,GAAcM,KAAKC,MAAL,EAAd,IAA+B,CAApC,CADjB;;AAGA,eAAOF,UAAP;ADPH;;AEtGD;;AAEA,QAAAG,UAAe;;AAEXC,eAAO;AACHC,oBAAQ,EAAEC,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAAuCC,SAAS,qmBAAhD,EADL;AAEHC,oBAAQ,EAAEH,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAAuCC,SAAS,qmBAAhD,EAFL;AAGHE,oBAAQ,EAAEJ,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAAuCC,SAAS,qmBAAhD,EAHL;AAIHG,oBAAQ,EAAEL,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAAuCC,SAAS,qmBAAhD,EAJL;AAKHI,oBAAQ,EAAEN,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAAuCC,SAAS,qmBAAhD;AALL;AAFI,KAAf;;ACDA;AACA;AAQA,QAAMK,iBAAiB,SAASA,cAAT,GAA0B;;AAE7C,YAAInB,IAAI,CAAR;AACA,YAAIoB,IAAI,CAAR;AACA,YAAIC,cAAc,EAAlB;AACA,YAAIC,eAAe,EAAnB;AACA,YAAMC,aAAalB,OAAOD,IAAP,CAAYK,QAAQC,KAApB,EAA2BT,MAA9C;;AH+GA;AG5GA,YAAInC,MAAI0D,cAAJ1D,GAAqByD,UAAzB,EAAqC;AACjCzD,kBAAI0D,cAAJ1D,GAAqByD,UAArBzD;AACH;;AH+GD;AG5GA,YAAIA,MAAIC,UAAJD,CAAe2D,SAAf3D,KAA6B4D,SAAjC,EAA4C;;AAExC,mBAAO1B,IAAIlC,MAAI0D,cAAf,EAA+B;AAC3B,oBAAIlB,aAAaJ,WAAWO,QAAQC,KAAnB,CAAjB;;AH+GA;AG5GA,oBAAI,CAACW,YAAYM,QAAZ,CAAqBrB,UAArB,CAAL,EAAuC;AACnCe,gCAAY3C,IAAZ,CAAiB4B,UAAjB;AACAN;AACH;AACJ;AACJ;AH8GD;AGzHA,aAaK;;AAED,uBAAOA,IAAIlC,MAAI0D,cAAf,EAA+B;AAC3B,wBAAII,eAAevB,OAAOD,IAAP,CAAYtC,MAAIC,UAAJD,CAAe+D,WAA3B,EAAwC5B,MAA3D;;AH+GA;AG5GA,wBAAI2B,iBAAiBL,UAArB,EAAiC;;AAE7B,4BAAIO,eAAe,EAAnB;;AH+GA;AG5GA,6BAAK,IAAIlB,IAAT,IAAiB9C,MAAIC,UAAJD,CAAe+D,WAAhC,EAA6C;AACzCC,yCAAapD,IAAb,CAAkB,CAACkC,IAAD,EAAO9C,MAAIC,UAAJD,CAAe+D,WAAf/D,CAA2B8C,IAA3B9C,CAAP,CAAlB;AACH;;AH+GD;AG5GAgE,qCAAaC,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACxB,mCAAOD,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAd;AACH,yBAFD;AHgHA;AACA;AG5GA,+BAAOjC,IAAIlC,MAAI0D,cAAf,EAA+B;AAC3BH,wCAAY3C,IAAZ,CAAiBoD,aAAa9B,CAAb,EAAgB,CAAhB,CAAjB;AACAA;AACH;AH8GD;AG5GAA;AACH;AH8GD;AGnIA,yBAuBK;AACD,gCAAIM,cAAaJ,WAAWO,QAAQC,KAAnB,CAAjB;;AH+GA;AG5GA,gCAAI,CAACY,aAAaK,QAAb,CAAsBrB,WAAtB,CAAL,EAAwC;AACpCgB,6CAAa5C,IAAb,CAAkB4B,WAAlB;;AH+GA;AG5GA,oCAAI,CAACxC,MAAIC,UAAJD,CAAe+D,WAAf/D,CAA2BoE,cAA3BpE,CAA0CwC,WAA1CxC,CAAL,EAA4D;AACxDuD,gDAAY3C,IAAZ,CAAiB4B,WAAjB;AACAxC,0CAAIC,UAAJD,CAAe+D,WAAf/D,CAA2BwC,WAA3BxC,IAAyC,CAAzCA;AACA6B,gDAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACAiC;AACH;AACJ;AACJ;AH8GD;AG5GA,wBAAIoB,IAAI,KAAR,EAAe;AACXpB,4BAAIlC,MAAI0D,cAAR;AACH;AACDJ;AACH;AACJ;AH8GD;AG5GA,eAAOC,WAAP;AACH,KAjFD;;AHgMA;AG5GA,QAAMe,kBAAkB,SAAlBA,eAAkB,CAAUC,QAAV,EAAoBC,aAApB,EAAmCC,SAAnC,EAA8C;;AAElE,YAAIC,iBAAiB1E,MAAIC,UAAJD,CAAeuE,QAAfvE,KAA4B,EAAjD;;AH+GA;AG5GA,YAAI,CAACA,MAAIC,UAAJD,CAAeoE,cAAfpE,CAA8BuE,QAA9BvE,CAAL,EAA8C;AAAA;AAAA;AAAA;;AAAA;;AAE1C,qCAAkBwE,aAAlB,8HAAiC;AAAA,wBAAxBG,KAAwB;;AAC7BD,mCAAeC,KAAf,IAAwBF,SAAxB;AACH;AAJyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7C;AH8GD;AGnHA,aAOK;AH8GD;AG9GC;AAAA;AAAA;;AAAA;AAED,0CAAkBD,aAAlB,mIAAiC;AAAA,4BAAxBG,MAAwB;;;AAE7B,4BAAI3E,MAAIC,UAAJD,CAAeuE,QAAfvE,EAAyBoE,cAAzBpE,CAAwC2E,MAAxC3E,CAAJ,EAAoD;AAChD,gCAAI4E,QAAQ5E,MAAIC,UAAJD,CAAeuE,QAAfvE,EAAyB2E,MAAzB3E,CAAZ;AACA4E,qCAAS,CAAT;AACAF,2CAAeC,MAAf,IAAwBC,KAAxB;AACH,yBAJD,MAKK;AACDF,2CAAeF,aAAf,IAAgCC,SAAhC;AACH;AACJ;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaJ;AH8GD;AG5GA,eAAOC,cAAP;AACH,KA5BD;;AC7FA;AACA;AASA,QAAMG,qBAAqB,SAASA,kBAAT,GAA8B;;AAErD,YAAIC,YAAY1F,SAAS2F,gBAAT,CAA0B,SAA1B,CAAhB;;AAEAhD,sBAAc+C,SAAd,EAAyB,UAAC5C,CAAD,EAAO;;AAE5B,gBAAI4C,UAAU5C,CAAV,EAAa8C,SAAb,CAAuBC,QAAvB,CAAgC,UAAhC,CAAJ,EAAiD;AAC7C,uBAAO,KAAP;AACH;AACD,gBAAInC,OAAO,CAACgC,UAAU5C,CAAV,EAAagD,UAAb,CAAwBxD,aAAxB,CAAsC,cAAtC,EAAsDyD,SAAvD,CAAX;;AJkOA;AI/NA,gBAAIC,cAAcN,UAAU5C,CAAV,EAAagD,UAAb,CAAwBxD,aAAxB,CAAsC,aAAtC,CAAlB;AACA,gBAAI2D,oBAAoBP,UAAU5C,CAAV,EAAagD,UAAb,CAAwBxD,aAAxB,CAAsC,qBAAtC,CAAxB;AACA,gBAAI4D,mBAAmBR,UAAU5C,CAAV,EAAagD,UAAb,CAAwBxD,aAAxB,CAAsC,oBAAtC,CAAvB;AACA,gBAAIkD,QAAQW,SAASH,YAAYD,SAArB,CAAZ;;AJkOA;AI/NAE,8BAAkBL,SAAlB,CAA4BQ,MAA5B,CAAmC,QAAnC;;AJkOA;AI/NAJ,wBAAYD,SAAZ,GAAwBP,QAAQ,CAAhC;;AJkOA;AI/NA,gBAAIa,YAAYnB,gBAAgB,mBAAhB,EAAqCxB,IAArC,EAA2C,CAA3C,CAAhB;;AJkOA;AI/NA9C,kBAAIC,UAAJD,CAAe0F,iBAAf1F,GAAmCyF,SAAnCzF;;AJkOA;AI/NA2F,8BAAkBb,UAAU5C,CAAV,CAAlB;;AJkOA;AI/NAL,wBAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACH,SA9BD;AA+BH,KAnCD;;AJqQA;AI/NA,QAAM0F,oBAAoB,SAASA,iBAAT,CAA2Bb,SAA3B,EAAsC;;AJkO5D;AI/NA,YAAI9E,MAAIC,UAAJD,CAAe4F,gBAAf5F,KAAoC4D,SAAxC,EAAmD;AAC/C5D,kBAAIC,UAAJD,CAAe4F,gBAAf5F,GAAkC,EAAlCA;AACH;;AAED,YAAI4F,mBAAmB5F,MAAIC,UAAJD,CAAe4F,gBAAf5F,IAAmC,EAA1D;AACA,YAAI8C,OAAO,CAACgC,UAAUI,UAAV,CAAqBxD,aAArB,CAAmC,cAAnC,EAAmDyD,SAApD,CAAX;AACA,YAAIU,gBAAJ;AACA,YAAIC,gBAAJ;AACA,YAAIC,kBAAJ;AACA,YAAIC,aAAa,KAAjB;;AJkOA;AI/NA,YAAIJ,iBAAiB9C,IAAjB,MAA2Bc,SAA/B,EAA0C;;AAEtCiC,sBAAU,EAAV;AACAC,sBAAU,CAAV;AACAC,wBAAYlF,iBAAZ;;AJkOA;AI/NAb,kBAAIC,UAAJD,CAAe4F,gBAAf5F,CAAgC8C,IAAhC9C,IAAwC+F,SAAxC/F;AACH;AJiOD;AIzOA,aAUK;AJiOD;AI/NAiG;AACH;AACD,iBAASA,cAAT,GAA0B;AACtB,gBAAIC,UAAUrF,kBAAkB,CAAlB,CAAd;;AJkOA;AI/NAkF,wBAAYH,iBAAiB9C,IAAjB,EAAuB,CAAvB,CAAZ;;AAEAvD,eAAG,YAAUwG,UAAU,CAAV,CAAV,GAAyB,QAAzB,GAAoCG,QAAQ,CAAR,CAAvC;AACA3G,eAAG,cAAYwG,UAAU,CAAV,CAAZ,GAA2B,QAA3B,GAAsCG,QAAQ,CAAR,CAAzC;;AJkOA;;AAEA;AI/NA,gBAAIH,UAAU,CAAV,MAAiBG,QAAQ,CAAR,CAAjB,IAA+BH,UAAU,CAAV,MAAiBG,QAAQ,CAAR,CAApD,EAAgE;AAC5DF,6BAAa,IAAb;AACH;AJiOD;AInOA,iBAIK,IAAIvD,KAAK0D,GAAL,CAASJ,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAxB,KAAuC,CAA3C,EAA8C;AAC/CF,iCAAa,IAAb,CAD+C,CAC7B;AACrB;AJiOD;AInOK,qBAIA,IAAIvD,KAAK0D,GAAL,CAASJ,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAxB,MAAwC,CAA5C,EAA+C;AAC5D3G,2BAAG,QAAH;AJiOY;AI/NA,4BAAIwG,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAnB,EAA+B;AAC3B3G,+BAAG,OAAH;AACCyG,yCAAa,IAAb;AACJ;AJiOD;AIpOA,6BAKK;AACDH,0CAAUO,qBAAV;AACAN,0CAAUO,qBAAV;AACH;AACJ;AJiOD;AI7OK,yBAcA;AACDR,sCAAUO,qBAAV;AACAN,sCAAUO,qBAAV;AACH;AJiOD;AI/NA,qBAASD,mBAAT,GAA+B;AJiO3B;AI/NA,oBAAIL,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAnB,EAA+B;AJiO3B;AI/NAL,8BAAUE,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAzB;AACH;AJiOD;AIpOA,qBAKK;AACDL,kCAAU,MAAMK,QAAQ,CAAR,IAAaH,UAAU,CAAV,CAAnB,CAAV;AACH;AACD,uBAAOF,OAAP;AACH;AJiOD;AI/NA,qBAASQ,mBAAT,GAA+B;AJiO3B;AI/NA,oBAAIN,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAnB,EAA+B;AJiO3B;AI/NAJ,8BAAUC,UAAU,CAAV,IAAeG,QAAQ,CAAR,CAAzB;AACH;AJiOD;AIpOA,qBAKK;AACDJ,kCAAU,MAAMI,QAAQ,CAAR,IAAaH,UAAU,CAAV,CAAnB,CAAV;AACH;AACD,uBAAOD,OAAP;AACH;;AJkOD;AI/NA,gBAAIE,eAAe,IAAnB,EAAyB;AACrB,uBAAOhG,MAAIC,UAAJD,CAAe4F,gBAAf5F,CAAgC8C,IAAhC9C,CAAP;AACA,uBAAO,KAAP;AACH;AACJ;;AJkOD;AI/NA6B,oBAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;;AAEA,YAAIqG,gBAAJ;AACA,YAAIC,aAAa,CAAjB;;AJkOA;AI/NA,YAAIP,eAAe,KAAnB,EAA0B;AJiOtB;AI/NAM,sBAAUE,WAAWC,WAAX,EAAwB,IAAxB,CAAV;AACH;;AJkOD;AI/NA,iBAASA,WAAT,GAAuB;AJiOnB;AI/NAF,0BAAc,CAAd;AACA,gBAAIA,aAAa,CAAb,KAAmB,CAAvB,EAA0B,CAEzB;AJ+NG;;AAEJ;AI/NAG;AACAJ,sBAAUE,WAAWC,WAAX,EAAwB,IAAxB,CAAV;AACH;;AJkOD;AI/NA,iBAASC,WAAT,GAAuB;AACnB,gBAAIC,mBAAmBd,OAAvB;AACA,gBAAIe,mBAAmBd,OAAvB;AACA,gBAAIe,aAAa,EAAjB;;AJkOA;AI/NA,gBAAIf,YAAY,CAAZ,IAAiBD,YAAY,CAAjC,EAAoC;AAChCf,0BAAUK,SAAV,GAAuB,QAAvB;AACAL,0BAAUE,SAAV,CAAoBQ,MAApB,CAA2B,UAA3B;AACAV,0BAAUgC,YAAV,CAAuB,UAAvB,EAAmC,KAAnC;AACA,uBAAO,KAAP;AACH;;AJkOD;AI/NA,gBAAIhB,UAAU,EAAV,IAAgBA,UAAU,CAA9B,EAAiC;AAC7Be,6BAAa,GAAb;AACH;AACD,gBAAIf,YAAY,CAAhB,EAAmB;AACfA,0BAAU,EAAV;AACAD,2BAAW,CAAX;AACH;AACD,gBAAIC,YAAY,EAAhB,EAAoB;AAChBc,mCAAmB,IAAnB;AACH;AJiOD;AI/NA9B,sBAAUK,SAAV,GAAuBwB,mBAAmB,GAAnB,GAAyBE,UAAzB,GAAsCD,gBAA7D;AACA9B,sBAAUE,SAAV,CAAoB+B,GAApB,CAAwB,UAAxB;AACAjC,sBAAUgC,YAAV,CAAuB,UAAvB,EAAmC,IAAnC;;AJkOA;AI/NAhB,uBAAW,CAAX;AACH;AACJ,KA9JD;;AChDA;AACA;AASA,QAAMkB,aAAa,SAASA,UAAT,CAAoBC,aAApB,EAAmC;;AAElD,YAAIC,WAAW,EAAf;;AL0aA;AK5akD;AAAA;AAAA;;AAAA;AAKlD,kCAAkBD,aAAlB,mIAAiC;AAAA,oBAAxBtC,KAAwB;;;AL0a7B;AKvaA,oBAAIwC,YAAYxE,QAAQC,KAAR,CAAc+B,KAAd,EAAqB7B,IAArC;AACA,oBAAIsE,kBAAkBzE,QAAQC,KAAR,CAAc+B,KAAd,EAAqB5B,UAA3C;AACA,oBAAIsE,eAAe1E,QAAQC,KAAR,CAAc+B,KAAd,EAAqB3B,OAAxC;AACA,oBAAIsE,sBAAJ;AACA,oBAAIC,mBAAJ;;AL0aA;AKvaA,oBAAIvH,MAAIC,UAAJD,CAAe0F,iBAAf1F,KAAqC4D,SAAzC,EAAoD;AAChD2D,iCAAa,CAAb;AACH,iBAFD,MAGK;AACDA,iCAAavH,MAAIC,UAAJD,CAAe0F,iBAAf1F,CAAiC2E,KAAjC3E,KAA2C,CAAxD;AACH;;AL0aD;AKvaA,oBAAIwH,oFAE6BL,SAF7B,wHAIuCC,eAJvC,+DAKuCC,YALvC,8EAO4BE,UAP5B,gGAAJ;;AAWAL,4BAAYM,SAAZ;ALyaA;AKvaH;ALyaD;AK7ckD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsClDxH,cAAIyH,SAAJzH,CAAcmF,SAAdnF,GAA0BkH,QAA1BlH;;AL0aA;AKhdkD;AAAA;AAAA;;AAAA;AAyClD,kCAAkBiH,aAAlB,mIAAiC;AAAA,oBAAxBtC,OAAwB;;;AL0a7B;AKvaA,oBAAI3E,MAAIC,UAAJD,CAAe4F,gBAAf5F,KAAoC4D,SAAxC,EAAmD;;AL0a/C;AKvaA,wBAAI5D,MAAIC,UAAJD,CAAe4F,gBAAf5F,CAAgC2E,OAAhC3E,MAA2C4D,SAA/C,EAA0D;;AAEtD,4BAAIkB,YAAY1F,SAAS2F,gBAAT,CAA0B,SAA1B,CAAhB;;AL0aA;AKvaA,6BAAK,IAAI7C,IAAI,CAAb,EAAgBA,IAAI4C,UAAU3C,MAA9B,EAAsCD,GAAtC,EAA2C;AACvC,gCAAIwF,aAAa5C,UAAU5C,CAAV,EAAagD,UAAb,CAAwBxD,aAAxB,CAAsC,cAAtC,EAAsDyD,SAAvE;;AAEA,gCAAIuC,eAAe/C,OAAnB,EAA0B;AACtBgB,kDAAkBb,UAAU5C,CAAV,CAAlB;AACH;AACJ;AACJ;AACJ;AACJ;AA7DiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DrD,KA9DD;;ALweA;AKvaA,QAAMyF,YAAY,SAASA,SAAT,GAAqB;;AL0anC;AKvaA,YAAI3H,MAAIC,UAAJD,CAAeK,MAAfL,KAA0B,IAA9B,EAAoC;AAChC,gBAAI4H,cAAcxI,SAASsC,aAAT,CAAuB,SAAvB,CAAlB;AACA,gBAAImG,aAAa,EAAjB;;AL0aA;AKvaA,gBAAI7H,MAAIC,UAAJD,CAAe8H,MAAf9H,KAA0B4D,SAA9B,EAAyC;AACrC5D,sBAAIC,UAAJD,CAAe8H,MAAf9H,GAAwBA,MAAI+H,MAAJ/H,CAAW8H,MAAnC9H;AACH;AACD,gBAAI8H,SAAS9H,MAAIC,UAAJD,CAAe8H,MAA5B;;AAEA,iBAAK,IAAI5F,IAAI,CAAb,EAAgBA,IAAI4F,MAApB,EAA4B5F,GAA5B,EAAiC;AAC7B2F,8BAAc,UAAd;AACH;ALyaD;AKvaAD,wBAAYzC,SAAZ,GAAwB0C,UAAxB;;AL0aA;AKvaAhG,wBAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACH;AACJ,KAtBD;;ALgcA;AKvaA,QAAM+H,WAAW,SAASA,QAAT,GAAoB;;AAEjC,YAAIC,cAAc7I,SAASsC,aAAT,CAAuB,eAAvB,CAAlB;;AL0aA;AKvaA,YAAI1B,MAAIC,UAAJD,CAAekI,KAAflI,KAAyB4D,SAA7B,EAAwC;AACpC5D,kBAAIC,UAAJD,CAAekI,KAAflI,GAAuB,CAAvBA;AACH;;AAED,YAAIkI,QAAQlI,MAAIC,UAAJD,CAAekI,KAA3B;;AL0aA;AKvaAD,oBAAY9C,SAAZ,GAAwB+C,KAAxB;AACH,KAbD;;ACpGA;AACA;AASA,QAAMC,iBAAiB,SAASA,cAAT,GAA0B;;ANqhB7C;AMlhBA,YAAInI,MAAIC,UAAJD,CAAeoI,UAAfpI,KAA8B4D,SAAlC,EAA6C;AACzC5D,kBAAIC,UAAJD,CAAeoI,UAAfpI,GAA4B,EAA5BA;AACH;;ANqhBD;AMlhBA,YAAIqI,mBAAJ;AACA,YAAInG,IAAI,CAAR;;ANqhBA;AMlhBA,YAAIlC,MAAIC,UAAJD,CAAesI,YAAftI,KAAgC4D,SAApC,EAA+C;AAC3C5D,kBAAIC,UAAJD,CAAesI,YAAftI,GAA8B,EAA9BA;AACH;;ANqhBD;AMlhBA,YAAIA,MAAIC,UAAJD,CAAeuI,cAAfvI,KAAkC4D,SAAtC,EAAiD;AAC7C5D,kBAAIC,UAAJD,CAAeuI,cAAfvI,GAAgC,EAAhCA;AACH;;ANqhBD;AMlhBA,eAAOkC,IAAIK,OAAOD,IAAP,CAAYtC,MAAIC,UAAJD,CAAe0F,iBAA3B,EAA8CvD,MAAzD,EAAiE;;ANqhB7D;AMlhBAkG,yBAAajG,WAAWpC,MAAIC,UAAJD,CAAe0F,iBAA1B,CAAb;;ANqhBA;AMlhBA,gBAAI,CAAC1F,MAAIC,UAAJD,CAAesI,YAAftI,CAA4BoE,cAA5BpE,CAA2CqI,UAA3CrI,CAAL,EAA6D;AACzDwI;AACA;AACH;ANohBD;AMlhBAtG;AACH;;ANqhBD;AMlhBA,iBAASsG,UAAT,GAAsB;AAClB,gBAAIC,eAAerJ,SAASsC,aAAT,CAAuB,gBAAvB,CAAnB;AACA,gBAAIgH,cAActJ,SAASsC,aAAT,CAAuB,eAAvB,CAAlB;AACA,gBAAIiH,cAAcvJ,SAASsC,aAAT,CAAuB,eAAvB,CAAlB;AACA,gBAAIkH,eAAexJ,SAASsC,aAAT,CAAuB,gBAAvB,CAAnB;AACA,gBAAIuG,cAAc7I,SAASsC,aAAT,CAAuB,eAAvB,CAAlB;AACA,gBAAIkG,cAAcxI,SAASsC,aAAT,CAAuB,SAAvB,CAAlB;AACA,gBAAIwG,QAAQ3C,SAAS0C,YAAY9C,SAArB,CAAZ;AACA,gBAAIpC,aAAaJ,QAAQC,KAAR,CAAcyF,UAAd,EAA0BtF,UAA3C;AACA,gBAAI8F,aAAa7I,MAAIC,UAAJD,CAAe8H,MAAhC;AACA,gBAAIlD,QAAQ,CAAZ;;ANqhBA;AMlhBA6D,yBAAazD,SAAb,CAAuBQ,MAAvB,CAA8B,QAA9B;;ANqhBA;AMlhBAkD,wBAAYvD,SAAZ,GAAwBkD,UAAxB;;ANqhBA;AMlhBAM,wBAAYrJ,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AACxC,oBAAIwJ,aAAa1J,SAASsC,aAAT,CAAuB,cAAvB,EAAuCiD,KAAxD;;AAEA,oBAAImE,eAAe/F,UAAf,IAA6B+F,WAAWC,WAAX,OAA6BhG,WAAWgG,WAAX,EAA9D,EAAwF;AACpFC;AACH,iBAFD,MAGK,IAAIF,eAAe,EAAnB,EAAuB;AACxBF,iCAAazD,SAAb,GAAyB,qBAAzB;AACH,iBAFI,MAGA;AACD8D;AACH;AACJ,aAZD;;ANiiBA;AMlhBA,qBAASD,OAAT,GAAmB;ANohBf;AMlhBAP,6BAAazD,SAAb,CAAuB+B,GAAvB,CAA2B,QAA3B;ANohBA;AMlhBA6B,6BAAazD,SAAb,GAAyB,6CAA6CkD,UAA7C,GAA0D,2BAA1D,GAAwFtF,UAAxF,GAAqG,aAA9H;ANohBA;AMlhBAmF,yBAASlI,MAAI+H,MAAJ/H,CAAWkJ,OAApB;ANohBA;AMlhBAjB,4BAAY9C,SAAZ,GAAwB+C,KAAxB;ANohBA;AMlhBAlI,sBAAIC,UAAJD,CAAekI,KAAflI,GAAuBkI,KAAvBlI;AACAA,sBAAIC,UAAJD,CAAesI,YAAftI,CAA4BqI,UAA5BrI,IAA0C+C,UAA1C/C;ANohBA;AMlhBA,oBAAIuC,OAAOD,IAAP,CAAYtC,MAAIC,UAAJD,CAAesI,YAA3B,EAAyCnG,MAAzC,KAAoDI,OAAOD,IAAP,CAAYK,QAAQC,KAApB,EAA2BT,MAAnF,EAA2F;AACvFnC,0BAAIC,UAAJD,CAAemJ,OAAfnJ,GAAyB,IAAzBA;AACAmJ;AACH;ANohBD;AMlhBAtH,4BAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACH;ANohBD;AMlhBA,qBAASgJ,QAAT,GAAoB;AAChB,oBAAIH,aAAa1J,SAASsC,aAAT,CAAuB,cAAvB,CAAjB;ANohBA;AMlhBAkH,6BAAazD,SAAb,GAAyB,YAAzB;ANohBA;AMlhBA2D,2BAAWM,WAAX,GAAyBN,WAAWnE,KAApC;ANohBA;AMlhBAmE,2BAAWnE,KAAX,GAAmB,EAAnB;ANohBA;AMlhBAiD,4BAAYyB,WAAZ,CAAwBzB,YAAY0B,oBAAZ,CAAiC,GAAjC,EAAsC,CAAtC,CAAxB;AACA1E,yBAAS,CAAT;ANohBA;AMlhBA,oBAAIA,UAAUiE,UAAd,EAA0B;ANohBtB;AMlhBAJ,iCAAazD,SAAb,CAAuB+B,GAAvB,CAA2B,QAA3B;AACAa,gCAAY5C,SAAZ,CAAsB+B,GAAtB,CAA0B,QAA1B;ANohBA;AMlhBA6B,iCAAazD,SAAb,GAAyB,iBAAzB;ANohBA;AMlhBAnF,0BAAIC,UAAJD,CAAeuI,cAAfvI,CAA8BqI,UAA9BrI,IAA4C+C,UAA5C/C;ANohBA;AMlhBA6B,gCAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACH;AACJ;ANohBD;AMlhBA,qBAASkJ,OAAT,GAAmB;AACf5J,mBAAG,UAAH;AACH;AACJ;AACJ,KAzHD;;ANVA;AACA;AAUA,QAAIS,QAAM;AACN0D,wBAAgB,CADV;AAEN+D,mBAAWrI,SAASsC,aAAT,CAAuB,gBAAvB,CAFL;AAGNtB,gBAAQ,KAHF;AAINmJ,eAAO,IAJD;AAKNxB,gBAAQ;AACJmB,qBAAS,EADL;AAEJpB,oBAAQ;AAFJ,SALF;AASN7H,oBAAY;AATN,KAAV;;AA2pBA;AA9oBAf,UAAM,YAAY;AACd;;AACAsK;AAgpBA;AA9oBA/H;AACH,KALD;;AAspBA;AA9oBA,QAAM+H,iBAAiB,SAASA,cAAT,GAA0B;;AAipB7C;AA9oBA3H,oBAAYM,MAAZ,GAAqBsH,IAArB,CAA0B,wBAAgB;;AAipBtC;AA9oBA,gBAAIC,iBAAiB,CAArB,EAAwB;AACpB/F;AACH;AAgpBD;AAlpBA,iBAIK;AACD3D,0BAAIC,UAAJD,CAAe2D,SAAf3D,GAA2B,KAA3BA;AACA2J;AACH;AACJ,SAXD,EAWGC,KAXH,CAWS,eAAO;AACZnK,oBAAQD,GAAR,CAAYqK,GAAZ;AACH,SAbD;AAcH,KAjBD;;AAkqBA;AA9oBA,QAAMlG,YAAY,SAASA,SAAT,GAAqB;;AAipBnC;AA9oBAmG;;AAipBA;AA9oBA9J,cAAIC,UAAJD,CAAe2D,SAAf3D,GAA2B,KAA3BA;;AAipBA;AA9oBA6B,oBAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;AACH,KAVD;;AA2pBA;AA9oBA,QAAM0J,aAAa,SAASA,UAAT,GAAsB;;AAipBrC;AA9oBA9H,oBAAYkI,OAAZ,CAAoB,gBAApB,EAAsCN,IAAtC,CAA2C,yBAAiB;AACxDO,sBAAUC,aAAV;AACH,SAFD,EAEGL,KAFH,CAES,eAAO;AACZnK,oBAAQD,GAAR,CAAYqK,GAAZ;AACH,SAJD;;AAqpBA;AA9oBA,iBAASG,SAAT,CAAmBC,aAAnB,EAAkC;;AAipB9B;AA9oBAjK,kBAAIC,UAAJD,GAAiBiK,aAAjBjK;;AAipBA;AA9oBAN;;AAipBA;AA9oBAoK;AACH;AACJ,KArBD;;AAsqBA;AA9oBA,QAAMA,kBAAkB,SAASA,eAAT,GAA2B;;AAipB/C;AA9oBA,YAAII,oBAAJ;;AAipBA;AA9oBA,YAAIlK,MAAIC,UAAJD,CAAeK,MAAfL,KAA0B,KAA9B,EAAqC;AACjCkK,0BAAclK,MAAIC,UAAJD,CAAemK,UAA7B;AACH;AAgpBD;AAlpBA,aAIK;AACDD,8BAAc7G,gBAAd;AACH;;AAipBD;AA9oBA2D,mBAAWkD,WAAX;AACAvC;AACAK;;AAipBA;AA9oBAhI,cAAIC,UAAJD,CAAeE,UAAfF,GAA4BJ,eAA5BI;AACAA,cAAIC,UAAJD,CAAemK,UAAfnK,GAA4BkK,WAA5BlK;AACAA,cAAIC,UAAJD,CAAe+D,WAAf/D,GAA6BsE,gBAAgB,aAAhB,EAA+B4F,WAA/B,EAA4C,CAA5C,CAA7BlK;;AAipBA;AA9oBA6B,oBAAYwC,OAAZ,CAAoB,gBAApB,EAAsCrE,MAAIC,UAA1C;;AAipBA;AA9oBA4E;;AAipBA;AA9oBA,YAAI7E,MAAIC,UAAJD,CAAe0F,iBAAf1F,KAAqC4D,SAArC5D,IAAkDA,MAAIC,UAAJD,CAAeK,MAAfL,KAA0B,IAAhF,EAAsF;AAClFmI;AACH;;AAipBD;AA9oBA,YAAInI,MAAIuJ,KAAJvJ,KAAc,IAAlB,EAAwB;AACpBT,eAAGS,MAAIC,UAAP;AACAV,eAAG,uBAAH;AACAA,eAAGS,MAAIC,UAAJD,CAAe0F,iBAAlB;AACAnG,eAAG,qBAAH;AACAA,eAAGS,MAAIC,UAAJD,CAAe+D,WAAlB;AACAxE,eAAG,uBAAH;AACAA,eAAGS,MAAIC,UAAJD,CAAe4F,gBAAlB;AACH;AACJ,KA7CD;;AA8rBA,WAAOwE,KAAP;AAEC,CA1xBU,EAAX","file":"app.js","sourcesContent":["\r\n// Imports\r\nimport { ready, cl, clv, checkSameDay, resetData, arrayCheck, getTodaysDate } from 'helperFunctions';\r\nimport { getListOfTerms, updateDataCount } from 'termCreation';\r\nimport { revealedBtnHandler } from 'termInteraction';\r\nimport { viewCreate, addHearts, setScore } from 'viewCreation';\r\nimport { createNewQuery } from 'queryInteraction';\r\n\r\n// Exports\r\nexport default ops;\r\n\r\n// Global options\r\nlet ops = {\r\n    displayedTerms: 3,\r\n    container: document.querySelector(\".terms-wrapper\"),\r\n    addDay: false,\r\n    debug: true,\r\n    points: {\r\n        correct: 50,\r\n        hearts: 3\r\n    },\r\n    storedData: {}\r\n}\r\n\r\n// Initialise modules on load\r\nready(function () {\r\n    'use strict';\r\n    checkFirstTime();\r\n    // Resets button\r\n    resetData();\r\n});\r\n\r\n// Runs when app opens\r\nconst checkFirstTime = function checkFirstTime() {\r\n\r\n    // Check if this is the first time app has run\r\n    localforage.length().then(numberOfKeys => {\r\n\r\n        // If first time\r\n        if (numberOfKeys === 0) {\r\n            firstTime();\r\n        }\r\n        // Not first time\r\n        else {\r\n            ops.storedData.firstTime = false;\r\n            initialise();\r\n        }\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\n// Runs if first time app has run\r\nconst firstTime = function firstTime() {\r\n\r\n    // Create terms\r\n    appBuildHandler();\r\n\r\n    // Set first time to false\r\n    ops.storedData.firstTime = false;\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n}\r\n\r\n// Initialises data and app\r\nconst initialise = function initialise() {\r\n\r\n    // Get stored data\r\n    localforage.getItem('ops.storedData').then(retrievedData => {\r\n        checkData(retrievedData);\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n\r\n    // Handle retrieved data\r\n    function checkData(retrievedData) {\r\n\r\n        // Set data in app from storage\r\n        ops.storedData = retrievedData;\r\n\r\n        // Check if a new day\r\n        checkSameDay();\r\n\r\n        // Start build\r\n        appBuildHandler();\r\n    }\r\n}\r\n\r\n// Calls functions to handle app creation and running\r\nconst appBuildHandler = function appBuildHandler() {\r\n\r\n    // Get initial terms\r\n    let pickedTerms;\r\n\r\n    // If same day, used daily terms\r\n    if (ops.storedData.newDay === false) {\r\n        pickedTerms = ops.storedData.dailyTerms;\r\n    }\r\n    // Else get new  \r\n    else {\r\n        pickedTerms = getListOfTerms();\r\n    }\r\n\r\n    // Create initial view\r\n    viewCreate(pickedTerms);\r\n    addHearts();\r\n    setScore();\r\n\r\n    // Create opened date, daily terms, viewed terms\r\n    ops.storedData.dateOpened = getTodaysDate();\r\n    ops.storedData.dailyTerms = pickedTerms;\r\n    ops.storedData.viewedTerms = updateDataCount('viewedTerms', pickedTerms, 0);\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    // Handles events for revealed terms\r\n    revealedBtnHandler();\r\n\r\n    // Create query if revealed terms\r\n    if (ops.storedData.revealedTermCount !== undefined && ops.storedData.newDay === true) {\r\n        createNewQuery();\r\n    }\r\n\r\n    // Debug code\r\n    if (ops.debug === true) {\r\n        cl(ops.storedData);\r\n        cl('Revealed terms count:');\r\n        cl(ops.storedData.revealedTermCount);\r\n        cl('Viewed terms count:');\r\n        cl(ops.storedData.viewedTerms);\r\n        cl('Revealed terms timer:');\r\n        cl(ops.storedData.revealCountdowns);\r\n    };\r\n}\r\n\r\n","\r\n// Imports\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport { ready, cl, clv, checkSameDay, resetData, arrayCheck, getTodaysDate, pickRandom, clickListener, getTimeComplete };\r\n\r\n// JS ready\r\nfunction ready(fn) {\r\n    if (document.readyState != 'loading') {\r\n        fn();\r\n    } else {\r\n        document.addEventListener('DOMContentLoaded', fn);\r\n    }\r\n}\r\n\r\n// Console log -> cl\r\nfunction cl(log) {\r\n    console.log(log);\r\n}\r\n\r\n// Console log plus value\r\nfunction clv(term, log) {\r\n    console.log(term + '= ' + log);\r\n}\r\n\r\n// Checks if the same or new day\r\nfunction checkSameDay() {\r\n    \r\n    let todaysDate = getTodaysDate();\r\n    let storedDate = [];\r\n\r\n    // Get date last stored\r\n    storedDate = Array.from(ops.storedData.dateOpened);\r\n\r\n    // Check if same day\r\n    if (arrayCheck(todaysDate, storedDate) === true) {\r\n        if (ops.addDay === true) { ops.storedData.newDay = true }\r\n        else { ops.storedData.newDay = false }\r\n    }\r\n    // Otherwise a new day\r\n    else {\r\n        ops.storedData.newDay = true;\r\n    }\r\n}\r\n\r\n// Creates array of day and month\r\nfunction getTodaysDate() {\r\n\r\n    // Get current day + month\r\n    let todayDate = [];\r\n    let day = new Date().getDate()\r\n    let month = new Date().getMonth();\r\n\r\n    todayDate.push([day, month]);\r\n\r\n    return todayDate;\r\n}\r\n\r\n// Creates array of day, month, hour, minute, second\r\nfunction getTimeComplete() {\r\n\r\n    // Get complete date time value \r\n    let timeComplete = [];\r\n    let day = new Date().getDate();\r\n    let month = new Date().getMonth();\r\n    let hour = new Date().getHours();\r\n    let minute = new Date().getMinutes();\r\n    let second = new Date().getSeconds();\r\n\r\n    timeComplete.push([day, month, hour, minute, second]);\r\n\r\n    return timeComplete;\r\n}\r\n\r\n// Check if arrays are the same\r\nfunction arrayCheck(arr1, arr2) {\r\n\r\n    // If same return true\r\n    if (JSON.stringify(arr1) == JSON.stringify(arr2)) {\r\n        return true;\r\n    }\r\n    // Else false\r\n    return false;\r\n}\r\n\r\n// Resets stored data\r\nfunction resetData() {\r\n\r\n    document.querySelector('.reset').addEventListener('click', (e) => {\r\n        e.preventDefault;\r\n        localforage.clear();\r\n        cl('APP RESET');\r\n    })\r\n}\r\n\r\n// Adds click functionality to selectors\r\nfunction clickListener(elements, clickFunction) {\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n        elements[i].addEventListener(\"click\", () => { clickFunction(i) });\r\n    }\r\n}\r\n\r\n// Get a random term\r\nfunction pickRandom(objectList) {\r\n    let keys = Object.keys(objectList),\r\n        pickedTerm = keys[keys.length * Math.random() << 0];\r\n\r\n    return pickedTerm;\r\n}","// App data\r\n\r\nexport default {\r\n\r\n    terms: {\r\n        verb_1: { term: \"verb_1\", definition: \"ans_1\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_2: { term: \"verb_2\", definition: \"ans_2\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_3: { term: \"verb_3\", definition: \"ans_3\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_4: { term: \"verb_4\", definition: \"ans_4\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_5: { term: \"verb_5\", definition: \"ans_5\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" }\r\n    }\r\n}\r\n","\r\n// Imports\r\nimport { cl, clv, pickRandom } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport { getListOfTerms, updateDataCount };\r\n\r\n// Creates a list of terms\r\nconst getListOfTerms = function getListOfTerms() {\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let listOfTerms = [];\r\n    let scannedTerms = [];\r\n    const dataLength = Object.keys(appData.terms).length;\r\n\r\n    // Prevent overflow\r\n    if (ops.displayedTerms > dataLength) {\r\n        ops.displayedTerms = dataLength;\r\n    }\r\n\r\n    // First time app opened\r\n    if (ops.storedData.firstTime === undefined) {\r\n\r\n        while (i < ops.displayedTerms) {\r\n            let pickedTerm = pickRandom(appData.terms);\r\n\r\n            // Ensure term hasn't been already scanned\r\n            if (!listOfTerms.includes(pickedTerm)) {\r\n                listOfTerms.push(pickedTerm);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    // App opened before\r\n    else {\r\n\r\n        while (i < ops.displayedTerms) {\r\n            let viewedLength = Object.keys(ops.storedData.viewedTerms).length;\r\n\r\n            // If all terms viewed\r\n            if (viewedLength === dataLength) {\r\n\r\n                let viewedSorted = [];\r\n\r\n                // Convert viewed terms to array\r\n                for (let term in ops.storedData.viewedTerms) {\r\n                    viewedSorted.push([term, ops.storedData.viewedTerms[term]])\r\n                }\r\n\r\n                // Sort array by view count\r\n                viewedSorted.sort((a, b) => {\r\n                    return a[1] - b[1]\r\n                })\r\n                //if ()\r\n                // Finish off iterator with lowest viewed terms\r\n                while (i < ops.displayedTerms) {\r\n                    listOfTerms.push(viewedSorted[i][0]);\r\n                    i++;\r\n                }\r\n                // Overflow protection\r\n                i++;\r\n            }\r\n            // Still unviewed terms in data\r\n            else {\r\n                let pickedTerm = pickRandom(appData.terms);\r\n\r\n                // Ensure term hasn't been already scanned\r\n                if (!scannedTerms.includes(pickedTerm)) {\r\n                    scannedTerms.push(pickedTerm);\r\n\r\n                    // Ensure term not viewed before\r\n                    if (!ops.storedData.viewedTerms.hasOwnProperty(pickedTerm)) {\r\n                        listOfTerms.push(pickedTerm);\r\n                        ops.storedData.viewedTerms[pickedTerm] = 0;\r\n                        localforage.setItem('ops.storedData', ops.storedData);\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n            // Overflow protection\r\n            if (j > 10000) {\r\n                i = ops.displayedTerms;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // Return final list of terms\r\n    return listOfTerms;\r\n}\r\n\r\n// Handles count of a type of data\r\nconst updateDataCount = function (dataType, termsToAdjust, baseValue) {\r\n\r\n    let dataTypeHolder = ops.storedData[dataType] || {};\r\n\r\n    // If no viewed data, create new \r\n    if (!ops.storedData.hasOwnProperty(dataType)) {\r\n\r\n        for (let value of termsToAdjust) {\r\n            dataTypeHolder[value] = baseValue;\r\n        }\r\n    }\r\n    // If viewed data exists\r\n    else {\r\n        // If viewed term exists, update count\r\n        for (let value of termsToAdjust) {\r\n\r\n            if (ops.storedData[dataType].hasOwnProperty(value)) {\r\n                let count = ops.storedData[dataType][value];\r\n                count += 1;\r\n                dataTypeHolder[value] = count;\r\n            }\r\n            else {\r\n                dataTypeHolder[termsToAdjust] = baseValue;\r\n            }\r\n        }\r\n    }\r\n    // Pass back final object\r\n    return dataTypeHolder;\r\n}","\r\n// Imports\r\nimport { cl, clv, clickListener, getTimeComplete } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { updateDataCount } from 'termCreation';\r\n\r\n// Exports\r\nexport { revealedBtnHandler, createRevealTimer };\r\n\r\n// Handles functions when reveal button clicked\r\nconst revealedBtnHandler = function revealedBtnHandler() {\r\n\r\n    let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n    clickListener(revealBtn, (i) => {\r\n\r\n        if (revealBtn[i].classList.contains('disabled')) {\r\n            return false;\r\n        }\r\n        let term = [revealBtn[i].parentNode.querySelector('.term-holder').innerHTML];\r\n\r\n        // Updates the revealed view counter\r\n        let countHolder = revealBtn[i].parentNode.querySelector('.term-views');\r\n        let definitionWrapper = revealBtn[i].parentNode.querySelector('.definition-wrapper');\r\n        let definitionHolder = revealBtn[i].parentNode.querySelector('.definition-holder');\r\n        let count = parseInt(countHolder.innerHTML);\r\n\r\n        // Show definition\r\n        definitionWrapper.classList.remove('hidden');\r\n\r\n        // Increase count by one\r\n        countHolder.innerHTML = count + 1;\r\n\r\n        // Pass to updateDataCount function\r\n        let dataCount = updateDataCount('revealedTermCount', term, 1);\r\n\r\n        // Set storedData\r\n        ops.storedData.revealedTermCount = dataCount;\r\n\r\n        // Starts a timer \r\n        createRevealTimer(revealBtn[i]);\r\n\r\n        // Save to storage\r\n        localforage.setItem('ops.storedData', ops.storedData);\r\n    });\r\n}\r\n\r\n// Adds a timer to the reveal button\r\nconst createRevealTimer = function createRevealTimer(revealBtn) {\r\n\r\n    // If no stored data for reveal countdowns\r\n    if (ops.storedData.revealCountdowns === undefined) {\r\n        ops.storedData.revealCountdowns = {};\r\n    }\r\n\r\n    let revealCountdowns = ops.storedData.revealCountdowns || {};\r\n    let term = [revealBtn.parentNode.querySelector('.term-holder').innerHTML];\r\n    let minutes;\r\n    let seconds;\r\n    let startTime;\r\n    let timerEnded = false;\r\n    \r\n    // New timer\r\n    if (revealCountdowns[term] === undefined) {\r\n\r\n        minutes = 60;\r\n        seconds = 0;\r\n        startTime = getTimeComplete();\r\n\r\n        // Set storedData\r\n        ops.storedData.revealCountdowns[term] = startTime;\r\n    }\r\n    // Existing timer\r\n    else {\r\n        // Get time from start to now\r\n        timeSinceStart();\r\n    }\r\n    function timeSinceStart() {\r\n        let nowTime = getTimeComplete()[0];\r\n\r\n        // Get terms start time for countdown\r\n        startTime = revealCountdowns[term][0];\r\n\r\n        cl('Hours: '+startTime[2] + ' now: ' + nowTime[2]);\r\n        cl('Minutes: '+startTime[3] + ' now: ' + nowTime[3]);\r\n\r\n        // Check remaining timer, format: startTime[day, month, hour, minute, second]\r\n        \r\n        // If day or month are different\r\n        if (startTime[0] !== nowTime[0] || startTime[1] !== nowTime[1]) {\r\n            timerEnded = true;\r\n        } \r\n        // If more than 2 hours different\r\n        else if (Math.abs(startTime[2] - nowTime[2]) >= 2) {\r\n            timerEnded = true; // Todo hour can break\r\n        }\r\n        // If 1 hour different\r\n        else if (Math.abs(startTime[2] - nowTime[2]) === 1) {\r\ncl('1 hour');\r\n            // NowTime overtaken startTime\r\n            if (startTime[3] < nowTime[3]) {\r\n                cl('ended');\r\n                 timerEnded = true; \r\n            }\r\n            // Otherwise still under 60 mins\r\n            else {\r\n                minutes = getRemainingMinutes();\r\n                seconds = getRemainingSeconds();\r\n            }\r\n        }\r\n        // Else same hour, subtract remaining minutes\r\n        else {\r\n            minutes = getRemainingMinutes();\r\n            seconds = getRemainingSeconds();\r\n        }\r\n        // Calculate remaining minutes\r\n        function getRemainingMinutes() {\r\n            // If nowTime minutes less, indicates change of hour\r\n            if (startTime[3] > nowTime[3]) {\r\n                // Remaining minutes in hour\r\n                minutes = startTime[3] - nowTime[3];\r\n            }\r\n            // Else same hour, subtract remaining minutes\r\n            else {\r\n                minutes = 59 - (nowTime[3] - startTime[3]);\r\n            }\r\n            return minutes;\r\n        }\r\n        // Calculate remaining seconds\r\n        function getRemainingSeconds() {\r\n            // If nowTime seconds less, indicates change of minute\r\n            if (startTime[4] > nowTime[4]) {\r\n                // Remaining seconds in minute\r\n                seconds = startTime[4] - nowTime[4];\r\n            }\r\n            // Else same minute, subtract remaining seconds\r\n            else {\r\n                seconds = 59 - (nowTime[4] - startTime[4]);\r\n            }\r\n            return seconds;\r\n        }\r\n\r\n        // Timer stopped, return to normal\r\n        if (timerEnded === true) {\r\n            delete ops.storedData.revealCountdowns[term];\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Set start time to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    let timeout;\r\n    let checkCount = 0;\r\n\r\n    // If timer is active\r\n    if (timerEnded === false) {\r\n        // Button timer, use timeout to run in background some browsers\r\n        timeout = setTimeout(timeoutCall, 1000)  \r\n    }\r\n\r\n    // Self calling function\r\n    function timeoutCall() {\r\n        // Sync timer in some devices\r\n        checkCount += 1;\r\n        if (checkCount % 5 === 0) {\r\n            //timeSinceStart();\r\n        }\r\n        // Call UI timer build\r\n        buttonTimer();\r\n        timeout = setTimeout(timeoutCall, 1000);\r\n    }\r\n\r\n    // Builds the timer\r\n    function buttonTimer() {\r\n        let displayedMinutes = minutes;\r\n        let displayedSeconds = seconds;\r\n        let hiddenZero = '';\r\n\r\n        // Timer end\r\n        if (seconds === 0 && minutes === 0) {\r\n            revealBtn.innerHTML = (\"Reveal\");\r\n            revealBtn.classList.remove('disabled');\r\n            revealBtn.setAttribute(\"disabled\", false);\r\n            return false;\r\n        }\r\n\r\n        // Handle issues like zero index\r\n        if (seconds < 10 && seconds > 0) {\r\n            hiddenZero = '0';\r\n        }\r\n        if (seconds === 0) {\r\n            seconds = 60;\r\n            minutes -= 1;\r\n        }\r\n        if (seconds === 60) {\r\n            displayedSeconds = '00';\r\n        }\r\n        // Update DOM\r\n        revealBtn.innerHTML = (displayedMinutes + ':' + hiddenZero + displayedSeconds);\r\n        revealBtn.classList.add('disabled');\r\n        revealBtn.setAttribute(\"disabled\", true);\r\n\r\n        // Decrease timer\r\n        seconds -= 1;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Imports\r\nimport { cl, clv } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { createRevealTimer } from 'termInteraction';\r\n\r\n// Exports\r\nexport { viewCreate, addHearts, setScore };\r\n\r\n// Create app view\r\nconst viewCreate = function viewCreate(termsToCreate) {\r\n\r\n    let viewHTML = \"\";\r\n\r\n    // Create HTML for terms\r\n    for (let value of termsToCreate) {\r\n\r\n        // Get terms and definitions from data\r\n        let termValue = appData.terms[value].term;\r\n        let definitionValue = appData.terms[value].definition;\r\n        let supportValue = appData.terms[value].support;\r\n        let revealCounter;\r\n        let viewsCount;\r\n\r\n        // Check storage for revealed count\r\n        if (ops.storedData.revealedTermCount === undefined) {\r\n            viewsCount = 0;\r\n        }\r\n        else {\r\n            viewsCount = ops.storedData.revealedTermCount[value] || 0;\r\n        }\r\n\r\n        // Create terms HTML\r\n        let newHolder =\r\n            `<div class=\"term-wrapper\">\r\n                <p class=\"term-holder\">${termValue}</p>\r\n                <div class=\"definition-wrapper hidden\">\r\n                    <p class=\"definition-holder\">${definitionValue}</p>\r\n                    <div class=\"support-wrapper\">${supportValue}</div>\r\n                </div>\r\n                <p class=\"term-views\">${viewsCount}</p>\r\n                <button class=\"reveal\">Reveal definition</button>\r\n            </div>`;\r\n\r\n        viewHTML += newHolder;\r\n        // Cycle for of loop\r\n    }\r\n    // Add to view\r\n    ops.container.innerHTML = viewHTML;\r\n\r\n    // Add countdown timers to term buttons\r\n    for (let value of termsToCreate) {\r\n\r\n        // Check if timer data exists\r\n        if (ops.storedData.revealCountdowns !== undefined) {\r\n\r\n            // Add countdown timers to buttons\r\n            if (ops.storedData.revealCountdowns[value] !== undefined) {\r\n\r\n                let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n                // Find button node that matches term in DOM\r\n                for (let i = 0; i < revealBtn.length; i++) {\r\n                    let revealTerm = revealBtn[i].parentNode.querySelector('.term-holder').innerHTML;\r\n\r\n                    if (revealTerm === value) {\r\n                        createRevealTimer(revealBtn[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Add hearts to page\r\nconst addHearts = function addHearts() {\r\n\r\n    // Only show hearts if a new day\r\n    if (ops.storedData.newDay === true) {\r\n        let heartHolder = document.querySelector('.hearts');\r\n        let heartsHTML = \"\";\r\n\r\n        // If no hearts data exists\r\n        if (ops.storedData.hearts === undefined) {\r\n            ops.storedData.hearts = ops.points.hearts;\r\n        }\r\n        let hearts = ops.storedData.hearts;\r\n\r\n        for (let i = 0; i < hearts; i++) {\r\n            heartsHTML += '<p>❤</p>';\r\n        }\r\n        // Add to view\r\n        heartHolder.innerHTML = heartsHTML;\r\n\r\n        // Add to storage\r\n        localforage.setItem('ops.storedData', ops.storedData);\r\n    }\r\n}\r\n\r\n// Sets the score\r\nconst setScore = function setScore() {\r\n\r\n    let scoreHolder = document.querySelector('.score-holder');\r\n\r\n    // Set score if it doesn't exist\r\n    if (ops.storedData.score === undefined) {\r\n        ops.storedData.score = 0;\r\n    }\r\n    \r\n    let score = ops.storedData.score;\r\n\r\n    // Add to view\r\n    scoreHolder.innerHTML = score;\r\n}","\r\n// Imports\r\nimport { cl, clv, pickRandom } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { updateDataCount } from 'termCreation';\r\n\r\n// Exports\r\nexport { createNewQuery };\r\n\r\n// Sets up query\r\nconst createNewQuery = function createNewQuery() {\r\n\r\n    // If no stored data for reveal countdowns\r\n    if (ops.storedData.queryTerms === undefined) {\r\n        ops.storedData.queryTerms = {};\r\n    }\r\n\r\n    // Pick a term for query\r\n    let randomTerm;\r\n    let i = 0;\r\n\r\n    // Set correctTerms storage if not exists\r\n    if (ops.storedData.correctTerms === undefined) {\r\n        ops.storedData.correctTerms = {};\r\n    }\r\n\r\n    // Set incorrectTerms storage if not exists\r\n    if (ops.storedData.incorrectTerms === undefined) {\r\n        ops.storedData.incorrectTerms = {};\r\n    }\r\n\r\n    // Prevent choosing query already answered correct\r\n    while (i < Object.keys(ops.storedData.revealedTermCount).length) {\r\n        \r\n        // Pick a random term\r\n        randomTerm = pickRandom(ops.storedData.revealedTermCount);\r\n        \r\n        // If query not from correct terms\r\n        if (!ops.storedData.correctTerms.hasOwnProperty(randomTerm)) {\r\n            buildQuery();\r\n            break;\r\n        }\r\n        // Else look for another\r\n        i++;\r\n    }\r\n    \r\n    // Build the query\r\n    function buildQuery() {\r\n        let queryWrapper = document.querySelector('.query-wrapper');\r\n        let queryHolder = document.querySelector('.query-holder');\r\n        let querySubmit = document.querySelector('.query-submit');\r\n        let resultHolder = document.querySelector('.result-holder');\r\n        let scoreHolder = document.querySelector('.score-holder');\r\n        let heartHolder = document.querySelector('.hearts');\r\n        let score = parseInt(scoreHolder.innerHTML);\r\n        let definition = appData.terms[randomTerm].definition;\r\n        let heartCount = ops.storedData.hearts;\r\n        let count = 0;\r\n\r\n        // Show the query wrapper\r\n        queryWrapper.classList.remove('hidden');\r\n\r\n        // Set value of query\r\n        queryHolder.innerHTML = randomTerm;\r\n\r\n        // Query outcomes\r\n        querySubmit.addEventListener(\"click\", () => {\r\n            let queryInput = document.querySelector('.query-input').value;\r\n\r\n            if (queryInput === definition || queryInput.toUpperCase() === definition.toUpperCase()) {\r\n                winCase();\r\n            }\r\n            else if (queryInput === \"\") {\r\n                resultHolder.innerHTML = \"Enter a definition.\";\r\n            }\r\n            else {\r\n                loseCase();\r\n            }\r\n        });\r\n\r\n        // If definition is right\r\n        function winCase() {\r\n            // Hide the query input\r\n            queryWrapper.classList.add('hidden');\r\n            // Display win message\r\n            resultHolder.innerHTML = \"Well done, the definition for <strong>\\\"\" + randomTerm + \"\\\"</strong> is <strong>\\\"\" + definition + \"\\\"</strong>\";\r\n            // Add to score\r\n            score += ops.points.correct;\r\n            // Update view\r\n            scoreHolder.innerHTML = score;\r\n            // Add to stored data\r\n            ops.storedData.score = score;\r\n            ops.storedData.correctTerms[randomTerm] = definition;\r\n            // Check if whole term list answered correctly\r\n            if (Object.keys(ops.storedData.correctTerms).length === Object.keys(appData.terms).length) {\r\n                ops.storedData.gameWon = true;\r\n                gameWon();\r\n            }\r\n            // Save to storage\r\n            localforage.setItem('ops.storedData', ops.storedData);\r\n        }\r\n        // If definition is wrong\r\n        function loseCase() {\r\n            let queryInput = document.querySelector('.query-input');\r\n            // Update view\r\n            resultHolder.innerHTML = \"Try again.\";\r\n            // Add placeholder\r\n            queryInput.placeholder = queryInput.value;\r\n            // Remove guess\r\n            queryInput.value = \"\";\r\n            // Lose a heart\r\n            heartHolder.removeChild(heartHolder.getElementsByTagName('p')[0]);\r\n            count += 1;\r\n            // If all hearts lost\r\n            if (count === heartCount) {\r\n                // Hide query \r\n                queryWrapper.classList.add('hidden');\r\n                heartHolder.classList.add('hidden');\r\n                // Update view\r\n                resultHolder.innerHTML = \"Sorry you lose.\";\r\n                // Add to storedDatta \r\n                ops.storedData.incorrectTerms[randomTerm] = definition;\r\n                // Save to storage\r\n                localforage.setItem('ops.storedData', ops.storedData);\r\n            }\r\n        }\r\n        // If game won\r\n        function gameWon() {\r\n            cl('game won');\r\n        }\r\n    }\r\n}"]}