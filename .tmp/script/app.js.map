{"version":3,"sources":["app.js","helperFunctions.js","verbs.js","termCreation.js"],"names":["app","ready","fn","document","readyState","addEventListener","cl","log","console","getTodaysDate","todayDate","day","Date","getDate","month","getMonth","push","arrayCheck","arr1","arr2","length","i","resetData","querySelector","e","preventDefault","localforage","clear","appData","terms","verb_1","term","definition","verb_2","verb_3","verb_4","verb_5","storedData","getListOfTerms","j","listOfTerms","scannedTerms","dataLength","Object","keys","globals","displayedTerms","firstTime","undefined","pickedTerm","pickRandom","includes","viewedLength","viewedTerms","viewedSorted","sort","a","b","hasOwnProperty","setItem","Math","random","viewCreate","termsToCreate","value","termValue","definitionValue","newTermHolder","createElement","newdefinitionHolder","classList","add","textContent","container","appendChild","createViewedTerms","termsToAdd","viewedTermsData","count","addDay","debug","openApp","then","numberOfKeys","initialise","catch","err","createTermsHandler","getItem","checkData","retrievedData","todaysDate","storedDate","addOneDay","Array","from","dateOpened","dailyTerms","pickedTerms","globals$1"],"mappings":"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","file":"app.js","sourcesContent":["\r\n// Imports\r\nimport {ready, cl, clv, resetData, arrayCheck, getTodaysDate} from 'helperFunctions';\r\nimport {getListOfTerms, viewCreate, createViewedTerms} from 'termCreation';\r\n\r\n// Exports\r\nexport default globals;\r\n\r\n// Global options\r\nconst globals = {\r\n    displayedTerms: 3,\r\n    container: document.querySelector(\".container\"),\r\n    addDay: false,\r\n    debug: true,\r\n}\r\n\r\n// Setup stored data\r\nlet storedData = storedData || {};\r\n\r\n// Initialise modules on load\r\nready(function(){\r\n\t'use strict';\r\n\topenApp();\r\n    // Resets button\r\n    resetData();\r\n});\r\n\r\n// Runs when app opens\r\nconst openApp = function openApp() {\r\n\r\n    // Check if this is the first time app has run\r\n    localforage.length().then( numberOfKeys => {\r\n        \r\n        // If first time\r\n        if(numberOfKeys===0) {\r\n            firstTime();\r\n        }\r\n        // Not first time\r\n        else {\r\n            storedData.firstTime = false;\r\n            initialise();\r\n        }\r\n    }).catch( err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\n// Runs if first time app has run\r\nconst firstTime = function firstTime() {\r\n    \r\n    // Create terms\r\n    createTermsHandler();\r\n\r\n    // Set first time to false\r\n    storedData.firstTime = false;\r\n\r\n    // Add to storage\r\n    localforage.setItem('storedData', storedData);\r\n}\r\n\r\n// Initialises app\r\nconst initialise = function initialise() {\r\n\r\n    // Get stored data\r\n    localforage.getItem('storedData').then( retrievedData => {\r\n        checkData(retrievedData);\r\n    }).catch( err => {\r\n        console.log(err);\r\n    });\r\n\r\n    // Handle retrieved data\r\n    function checkData(retrievedData) {\r\n\r\n        // Set data in app from storage\r\n        storedData = retrievedData;\r\n        \r\n        // Check if a new day\r\n        let todaysDate = getTodaysDate();\r\n        let storedDate = [];\r\n        let addOneDay = true;\r\n            \r\n        // Get date last stored\r\n        storedDate = Array.from(retrievedData.dateOpened);\r\n\r\n        // If same day, use dailyTerms data\r\n        if (arrayCheck(todaysDate, storedDate) === true) {\r\n            if (globals.addDay === true) {createTermsHandler();}\r\n            else {viewCreate(retrievedData.dailyTerms);}\r\n        }\r\n        // Else create new terms\r\n        else {\r\n            createTermsHandler();\r\n        }\r\n    }    \r\n}\r\n\r\n// Calls functions to handle term creation\r\nconst createTermsHandler = function createTermsHandler() {\r\n\r\n     // Get initial terms\r\n    let pickedTerms = getListOfTerms();\r\n\r\n    // Create initial view\r\n    viewCreate(pickedTerms);\r\n\r\n    // Create opened date, daily terms, viewed terms\r\n    storedData.dateOpened = getTodaysDate();\r\n    storedData.dailyTerms = pickedTerms;    \r\n    storedData.viewedTerms = createViewedTerms(pickedTerms);\r\n    \r\n    // Add to storage\r\n    localforage.setItem('storedData', storedData);\r\n} \r\n\r\n","//- Global helper functions\r\n\r\n// JS ready\r\nexport function ready(fn) {\r\n\tif (document.readyState != 'loading'){\r\n\t\tfn();\r\n\t} else {\r\n\t\tdocument.addEventListener('DOMContentLoaded', fn);\r\n\t}\r\n}\r\n\r\n// Console log -> cl\r\nexport function cl(log) {\r\n\tconsole.log(log);\r\n}\r\n\r\n// Console log plus value\r\nexport function clv(term,log) {\r\n\tconsole.log(term+'= '+log);\r\n}\r\n\r\n// Creates array of day and month\r\nexport function getTodaysDate() {\r\n\r\n    // Set opened date to storedData\r\n    let todayDate = [],\r\n        day = new Date().getDate(),\r\n        month = new Date().getMonth();\r\n\r\n    todayDate.push(day);\r\n    todayDate.push(month);\r\n\r\n    return todayDate;\r\n}\r\n\r\n// Check if arrays are the same\r\nexport function arrayCheck(arr1, arr2) {\r\n\r\n    if(arr1.length !== arr2.length)\r\n        return false;\r\n    for(var i = arr1.length; i--;) {\r\n        if(arr1[i] !== arr2[i])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Resets stored data\r\nexport function resetData() {\r\n\r\n    document.querySelector('.reset').addEventListener('click', (e) => {\r\n        e.preventDefault;\r\n        localforage.clear();\r\n        cl('App reset');\r\n    })\r\n}","// App data\r\n\r\nexport default { \r\n\r\n    terms: {\r\n        verb_1: {term: \"verb_1\", definition: \"ans_1\"}, \r\n        verb_2: {term: \"verb_2\", definition: \"ans_2\"}, \r\n        verb_3: {term: \"verb_3\", definition: \"ans_3\"}, \r\n        verb_4: {term: \"verb_4\", definition: \"ans_4\"}, \r\n        verb_5: {term: \"verb_5\", definition: \"ans_5\"}\r\n    }\r\n}\r\n","\r\n// Imports\r\nimport {ready, cl, clv, arrayCheck} from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport globals from 'app';\r\n\r\n// Exports\r\nexport {getListOfTerms, viewCreate, createViewedTerms};\r\n\r\n// Setup stored data\r\nlet storedData = storedData || {};\r\n\r\n// Creates a list of terms\r\nconst getListOfTerms = function getListOfTerms() {\r\n   \r\n    let i = 0;\r\n    let j = 0;\r\n    let listOfTerms = [];\r\n    let scannedTerms = [];\r\n    const dataLength = Object.keys(appData.terms).length;\r\n\r\n    // Prevent overflow\r\n    if (globals.displayedTerms > dataLength) {\r\n        globals.displayedTerms = dataLength;\r\n    }\r\n    \r\n    // First time app opened\r\n    if (storedData.firstTime === undefined) {\r\n       \r\n        while (i<globals.displayedTerms) {\r\n        let pickedTerm = pickRandom();\r\n\r\n            // Ensure term hasn't been already scanned\r\n            if (!listOfTerms.includes(pickedTerm)) {\r\n                listOfTerms.push(pickedTerm);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    // App opened before\r\n    else {\r\n        const viewedLength = Object.keys(storedData.viewedTerms).length;\r\n        \r\n        while (i<globals.displayedTerms) {\r\n            \r\n            // If all terms viewed\r\n            if (viewedLength === dataLength) {              \r\n                let viewedSorted = [];\r\n                \r\n                // Convert viewed terms to array\r\n                for (let term in storedData.viewedTerms) {\r\n                    viewedSorted.push([term, storedData.viewedTerms[term]])\r\n                }\r\n                // Sort array by view count\r\n                viewedSorted.sort( (a, b) => {\r\n                    return a[1] - b[1]\r\n                })\r\n                // Finish off iterator with lowest viewed terms\r\n                while (i<globals.displayedTerms) {\r\n                    listOfTerms.push(viewedSorted[i][0]);\r\n                    i++;\r\n                }\r\n                // Overflow protection\r\n                i++;\r\n            }\r\n            else {\r\n                let pickedTerm = pickRandom();\r\n                // Ensure term hasn't been already scanned\r\n                if (!scannedTerms.includes(pickedTerm)) {\r\n                    scannedTerms.push(pickedTerm);\r\n                    // Ensure term not viewed before\r\n                    if (!storedData.viewedTerms.hasOwnProperty(pickedTerm)) {\r\n                        listOfTerms.push(pickedTerm);\r\n                        storedData.viewedTerms[pickedTerm] = 0;\r\n                        localforage.setItem('storedData', storedData);\r\n                        i++;\r\n                    }\r\n                }   \r\n            }\r\n            // Overflow protection\r\n            if (j > 1000) {\r\n                i = globals.displayedTerms;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // Get random terms from data\r\n    function pickRandom() {\r\n        let keys = Object.keys(appData.terms),\r\n            pickedTerm = keys[ keys.length * Math.random() << 0];\r\n\r\n        return pickedTerm;\r\n    }\r\n    return listOfTerms;\r\n}\r\n\r\n// Create app view\r\nconst viewCreate = function viewCreate(termsToCreate) {\r\n\r\n    for (let value of termsToCreate) {\r\n        \r\n        // Get terms and definitions from data\r\n        let termValue       = appData.terms[value].term,\r\n            definitionValue = appData.terms[value].definition;\r\n        \r\n        // Create holders\r\n        let newTermHolder = document.createElement('p'),\r\n            newdefinitionHolder = document.createElement('p');\r\n\r\n        // Add classes to holders\r\n        newTermHolder.classList.add('holder-term');\r\n        newdefinitionHolder.classList.add('holder-definition');\r\n\r\n        // Add content to holders\r\n        newTermHolder.textContent = termValue;\r\n        newdefinitionHolder.textContent = definitionValue;\r\n\r\n        // Add to view\r\n        globals.container.appendChild(newTermHolder);\r\n        globals.container.appendChild(newdefinitionHolder);\r\n        \r\n        // Cycle for of loop\r\n        value++;\r\n    }\r\n}\r\n\r\n// Handles count of viewed terms\r\nconst createViewedTerms = function(termsToAdd) {\r\n\r\n    let viewedTermsData = storedData.viewedTerms || {};\r\n\r\n    // If no viewed data, create new \r\n    if (!storedData.hasOwnProperty('viewedTerms')) {\r\n        \r\n        for (let value of termsToAdd) {   \r\n            viewedTermsData[value] = 0;\r\n        }\r\n    }\r\n    // If viewed data exists\r\n    else {\r\n        // If viewed term exists, update count\r\n        for (let value of termsToAdd) {   \r\n            \r\n            if (storedData.viewedTerms.hasOwnProperty(value)) {\r\n                let count = storedData.viewedTerms[value];\r\n                count += 1;\r\n                viewedTermsData[value] = count;\r\n            }\r\n            else {\r\n                viewedTermsData[termsToAdd] = 0;\r\n            }       \r\n        }\r\n    }\r\n    // Pass back final object\r\n    return viewedTermsData;\r\n}"]}