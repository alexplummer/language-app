{"version":3,"sources":["app.js","helperFunctions.js","verbs.js","termCreation.js","viewCreation.js","queryInteraction.js","termInteraction.js"],"names":["app","ready","fn","document","readyState","addEventListener","cl","log","console","checkSameDay","todaysDate","getTodaysDate","storedDate","Array","from","ops","storedData","dateOpened","arrayCheck","addDay","newDay","todayDate","day","Date","getDate","month","getMonth","push","arr1","arr2","JSON","stringify","resetData","querySelector","e","preventDefault","localforage","clear","clickListener","elements","clickFunction","i","length","pickRandom","objectList","keys","Object","pickedTerm","Math","random","checkQuery","item1","item2","toUpperCase","getBigrams","string","j","ref","s","v","toLowerCase","slice","stringSimilarity","str1","str2","hit_count","k","len","len1","pairs1","pairs2","union","x","y","relevance","wordAccuracy","appData","terms","verb_1","term","definition","support","verb_2","verb_3","verb_4","verb_5","getListOfTerms","listOfTerms","scannedTerms","dataLength","displayedTerms","firstTime","undefined","includes","incorrectTerms","reminderTerm","remindedTerms","dailyReminder","getOwnPropertyNames","viewedLength","viewedTerms","viewedSorted","m","hasOwnProperty","splice","sort","a","b","setItem","updateDataCount","dataType","termsToAdjust","baseValue","dataTypeHolder","value","count","viewCreate","termsToCreate","viewHTML","termValue","definitionValue","supportValue","revealCounter","viewsCount","revealedTermCount","newHolder","container","innerHTML","revealCountdowns","revealBtn","querySelectorAll","revealTerm","parentNode","createRevealTimer","addHearts","heartHolder","heartsHTML","hearts","points","setScore","scoreHolder","score","createNewQuery","queryTerms","randomTerm","correctTerms","dailyQuery","queryHandler","dailyTerms","queryWrapper","queryHolder","querySubmit","resultHolder","parseInt","classList","remove","queryInput","winCase","loseCase","spelling","add","correct","queryComplete","gameWon","placeholder","removeChild","getElementsByTagName","revealedBtnHandler","contains","countHolder","definitionWrapper","definitionHolder","dataCount","revealBonusCount","revealDailyBonus","revealDailyBonusTarget","complete","dailyBonus","minutes","counterMins","seconds","counterSecs","remainingMinutes","remainingSeconds","startTime","timerEnded","getTime","startTimer","nowTime","setAttribute","diffSecs","floor","totalSecs","clearInterval","timerUpdate","timeout","checkCount","setInterval","buttonTimer","displayedMinutes","displayedSeconds","hiddenZero","disabled","debug","checkFirstTime","then","numberOfKeys","initialise","catch","err","appBuildHandler","getItem","checkData","retrievedData","pickedTerms","ops$1"],"mappings":"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","file":"app.js","sourcesContent":["\r\n// Imports\r\nimport { ready, cl, clv, checkSameDay, resetData, arrayCheck, getTodaysDate } from 'helperFunctions';\r\nimport { getListOfTerms, updateDataCount } from 'termCreation';\r\nimport { revealedBtnHandler } from 'termInteraction';\r\nimport { viewCreate, addHearts, setScore } from 'viewCreation';\r\nimport { createNewQuery } from 'queryInteraction';\r\n\r\n// Exports\r\nexport default ops;\r\n\r\n// Global options\r\nlet ops = {\r\n    displayedTerms: 3,\r\n    counterMins: 0,\r\n    counterSecs: 1,\r\n    revealDailyBonusTarget: 2,\r\n    wordAccuracy: 0.5,\r\n    container: document.querySelector(\".terms-wrapper\"),\r\n    addDay: true,\r\n    debug: true,\r\n    points: {\r\n        correct: 50,\r\n        dailyBonus: 10,\r\n        hearts: 1\r\n    },\r\n    storedData: {}\r\n}\r\n\r\n// Initialise modules on load\r\nready(function () {\r\n    'use strict';\r\n    checkFirstTime();\r\n    // Resets button\r\n    resetData();\r\n});\r\n\r\n// Runs when app opens\r\nconst checkFirstTime = function checkFirstTime() {\r\n\r\n    // Check if this is the first time app has run\r\n    localforage.length().then(numberOfKeys => {\r\n\r\n        // If first time\r\n        if (numberOfKeys === 0) {\r\n            firstTime();\r\n        }\r\n        // Not first time\r\n        else {\r\n            ops.storedData.firstTime = false;\r\n            initialise();\r\n        }\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\n// Runs if first time app has run\r\nconst firstTime = function firstTime() {\r\n\r\n    // Create terms\r\n    appBuildHandler();\r\n\r\n    // Set first time to false\r\n    ops.storedData.firstTime = false;\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n}\r\n\r\n// Initialises data and app\r\nconst initialise = function initialise() {\r\n\r\n    // Get stored data\r\n    localforage.getItem('ops.storedData').then(retrievedData => {\r\n        checkData(retrievedData);\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n\r\n    // Handle retrieved data\r\n    function checkData(retrievedData) {\r\n\r\n        // Set data in app from storage\r\n        ops.storedData = retrievedData;\r\n\r\n        // Check if a new day\r\n        checkSameDay();\r\n\r\n        // Start build\r\n        appBuildHandler();\r\n    }\r\n}\r\n\r\n// Calls functions to handle app creation and running\r\nconst appBuildHandler = function appBuildHandler() {\r\n\r\n    // Get initial terms\r\n    let pickedTerms;\r\n\r\n    // If same day, used daily terms\r\n    if (ops.storedData.newDay === false) {\r\n        pickedTerms = ops.storedData.dailyTerms;\r\n    }\r\n    // Else get new  \r\n    else {\r\n        pickedTerms = getListOfTerms();\r\n        \r\n        // Set daily limit\r\n        if (ops.storedData.revealDailyBonus === undefined) {\r\n            ops.storedData.revealDailyBonus = {};\r\n        }\r\n        // Reset daily reveal bonus\r\n        ops.storedData.revealDailyBonus.complete = false;\r\n    }\r\n\r\n    // Create initial view\r\n    viewCreate(pickedTerms);\r\n    setScore();\r\n\r\n    // Create opened date, daily terms, viewed terms\r\n    ops.storedData.dateOpened = getTodaysDate();\r\n    ops.storedData.dailyTerms = pickedTerms;\r\n    ops.storedData.viewedTerms = updateDataCount('viewedTerms', pickedTerms, 0);\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    // Handles events for revealed terms\r\n    revealedBtnHandler();\r\n\r\n    // Keep query active each day\r\n    if (ops.storedData.queryComplete === undefined) {\r\n        ops.storedData.queryComplete = {};\r\n    }\r\n    if (ops.storedData.newDay === true) {\r\n        delete ops.storedData.dailyQuery;\r\n        ops.storedData.queryComplete = false;\r\n\r\n        // Delete daily reminder\r\n        if (ops.storedData.remindedTerms.dailyReminder !== undefined) {\r\n            delete ops.storedData.remindedTerms.dailyReminder;\r\n        }\r\n    }\r\n    // Create query if revealed terms\r\n    if (ops.storedData.revealedTermCount !== undefined && ops.storedData.queryComplete === false) {\r\n        createNewQuery();\r\n    }\r\n\r\n    // Debug code\r\n    if (ops.debug === true) {\r\n        cl(ops.storedData);\r\n        //cl('Revealed terms count:');\r\n        //cl(ops.storedData.revealedTermCount);\r\n        //cl('Viewed terms count:');\r\n        //cl(ops.storedData.viewedTerms);\r\n        //cl('Revealed terms timer:');\r\n        //cl(ops.storedData.revealCountdowns);\r\n    };\r\n}\r\n\r\n","\r\n// Imports\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport {\r\n    ready,\r\n    cl,\r\n    clv,\r\n    checkSameDay,\r\n    resetData,\r\n    arrayCheck,\r\n    getTodaysDate,\r\n    pickRandom,\r\n    clickListener,\r\n    getTimeComplete,\r\n    checkQuery\r\n};\r\n\r\n// JS ready\r\nfunction ready(fn) {\r\n    if (document.readyState != 'loading') {\r\n        fn();\r\n    } else {\r\n        document.addEventListener('DOMContentLoaded', fn);\r\n    }\r\n}\r\n\r\n// Console log -> cl\r\nfunction cl(log) {\r\n    console.log(log);\r\n}\r\n\r\n// Console log plus value\r\nfunction clv(term, log) {\r\n    console.log(term + '= ' + log);\r\n}\r\n\r\n// Checks if the same or new day\r\nfunction checkSameDay() {\r\n\r\n    let todaysDate = getTodaysDate();\r\n    let storedDate = [];\r\n\r\n    // Get date last stored\r\n    storedDate = Array.from(ops.storedData.dateOpened);\r\n\r\n    // Check if same day\r\n    if (arrayCheck(todaysDate, storedDate) === true) {\r\n        if (ops.addDay === true) { ops.storedData.newDay = true }\r\n        else { ops.storedData.newDay = false }\r\n    }\r\n    // Otherwise a new day\r\n    else {\r\n        ops.storedData.newDay = true;\r\n    }\r\n}\r\n\r\n// Creates array of day and month\r\nfunction getTodaysDate() {\r\n\r\n    // Get current day + month\r\n    let todayDate = [];\r\n    let day = new Date().getDate()\r\n    let month = new Date().getMonth();\r\n\r\n    todayDate.push([day, month]);\r\n\r\n    return todayDate;\r\n}\r\n\r\n// Creates array of day, month, hour, minute, second\r\nfunction getTimeComplete() {\r\n\r\n    // Get complete date time value \r\n    let timeComplete = [];\r\n    let day = new Date().getDate();\r\n    let month = new Date().getMonth();\r\n    let hour = new Date().getHours();\r\n    let minute = new Date().getMinutes();\r\n    let second = new Date().getSeconds();\r\n\r\n    timeComplete.push([day, month, hour, minute, second]);\r\n\r\n    return timeComplete;\r\n}\r\n\r\n// Check if arrays are the same\r\nfunction arrayCheck(arr1, arr2) {\r\n\r\n    // If same return true\r\n    if (JSON.stringify(arr1) == JSON.stringify(arr2)) {\r\n        return true;\r\n    }\r\n    // Else false\r\n    return false;\r\n}\r\n\r\n// Resets stored data\r\nfunction resetData() {\r\n\r\n    document.querySelector('.reset').addEventListener('click', (e) => {\r\n        e.preventDefault;\r\n        localforage.clear();\r\n        cl('APP RESET');\r\n    })\r\n}\r\n\r\n// Adds click functionality to selectors\r\nfunction clickListener(elements, clickFunction) {\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n        elements[i].addEventListener(\"click\", () => { clickFunction(i) });\r\n    }\r\n}\r\n\r\n// Get a random term\r\nfunction pickRandom(objectList) {\r\n    let keys = Object.keys(objectList),\r\n        pickedTerm = keys[keys.length * Math.random() << 0];\r\n\r\n    return pickedTerm;\r\n}\r\n\r\n// Check if two words the same\r\nfunction checkQuery(item1, item2) {\r\n\r\n    if (item1 === item2) return true;\r\n    if (item1.toUpperCase() === item2.toUpperCase()) return true;\r\n\r\n    // Perform fuzzy comparison\r\n    let getBigrams = function (string) {\r\n        let i, j, ref, s, v;\r\n        s = string.toLowerCase();\r\n        v = new Array(s.length - 1);\r\n        for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {\r\n            v[i] = s.slice(i, i + 2);\r\n        }\r\n        return v;\r\n    };\r\n    let stringSimilarity = function (str1, str2) {\r\n        let hit_count, j, k, len, len1, pairs1, pairs2, union, x, y;\r\n        if (str1.length > 0 && str2.length > 0) {\r\n            pairs1 = getBigrams(str1);\r\n            pairs2 = getBigrams(str2);\r\n            union = pairs1.length + pairs2.length;\r\n            hit_count = 0;\r\n            for (j = 0, len = pairs1.length; j < len; j++) {\r\n                x = pairs1[j];\r\n                for (k = 0, len1 = pairs2.length; k < len1; k++) {\r\n                    y = pairs2[k];\r\n                    if (x === y) {\r\n                        hit_count++;\r\n                    }\r\n                }\r\n            }\r\n            if (hit_count > 0) {\r\n                return (2.0 * hit_count) / union;\r\n            }\r\n        }\r\n        return 0.0;\r\n    };\r\n    let relevance = stringSimilarity(item1, item2);\r\n    if (relevance > ops.wordAccuracy) return \"mispelled\";\r\n    \r\n    // Else false\r\n    return false;\r\n}\r\n","// App data\r\n\r\nexport default {\r\n\r\n    terms: {\r\n        verb_1: { term: \"verb_1\", definition: \"ans_1\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_2: { term: \"verb_2\", definition: \"ans_2\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_3: { term: \"verb_3\", definition: \"ans_3\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_4: { term: \"verb_4\", definition: \"ans_4\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" },\r\n        verb_5: { term: \"verb_5\", definition: \"ans_5\", support: \"<div><p>Present</p><table><tbody><tr><td>io</td><td>abbandono</td></tr><tr><td>tu</td><td>abbandoni</td></tr><tr><td>lui/lei</td><td>abbandona</td></tr><tr><td>noi</td><td>abbandoniamo</td></tr><tr><td>voi</td><td>abbandonate</td></tr><tr><td>loro</td><td>abbandonano</td></tr></tbody></table></div><div><p>Imperfect</p><table><tbody><tr><td>io</td><td>abbandonavo</td></tr><tr><td>tu</td><td>abbandonavi</td></tr><tr><td>lui/lei</td><td>abbandonava</td></tr><tr><td>noi</td><td>abbandonavamo</td></tr><tr><td>voi</td><td>abbandonavate</td></tr><tr><td>loro</td><td>abbandonavano</td></tr></tbody></table></div>\" }\r\n    }\r\n}\r\n","\r\n// Imports\r\nimport { cl, clv, pickRandom } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport { getListOfTerms, updateDataCount };\r\n\r\n// Creates a list of terms\r\nconst getListOfTerms = function getListOfTerms() {\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let listOfTerms = [];\r\n    let scannedTerms = [];\r\n    const dataLength = Object.keys(appData.terms).length;\r\n\r\n    // Prevent overflow\r\n    if (ops.displayedTerms > dataLength) {\r\n        ops.displayedTerms = dataLength;\r\n    }\r\n\r\n    // First time app opened\r\n    if (ops.storedData.firstTime === undefined) {\r\n\r\n        while (i < ops.displayedTerms) {\r\n            let pickedTerm = pickRandom(appData.terms);\r\n\r\n            // Ensure term hasn't been already scanned\r\n            if (!listOfTerms.includes(pickedTerm)) {\r\n                listOfTerms.push(pickedTerm);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    // App opened before\r\n    else {\r\n\r\n        // Add reminder for previous incorrect term\r\n        if (Object.keys(ops.storedData.incorrectTerms).length > 0) {\r\n            \r\n            let reminderTerm;\r\n\r\n            // Add reminded terms list\r\n            if (ops.storedData.remindedTerms === undefined) {\r\n                ops.storedData.remindedTerms = {};\r\n            }\r\n            // Keep reminded term the same\r\n            if (ops.storedData.dailyReminder === undefined) {\r\n                ops.storedData.dailyReminder = {};\r\n                reminderTerm = pickRandom(ops.storedData.incorrectTerms);\r\n                reminderTerm = Object.getOwnPropertyNames(reminderTerm);\r\n                ops.storedData.dailyReminder[reminderTerm] = appData.terms[reminderTerm].definition; \r\n            }\r\n            else { \r\n                reminderTerm = ops.storedData.dailyReminder;\r\n                reminderTerm = Object.getOwnPropertyNames(reminderTerm);\r\n            }\r\n            // Add to terms\r\n            listOfTerms.push(reminderTerm);\r\n            // Remove from incorrect terms\r\n            delete ops.storedData.incorrectTerms[reminderTerm];\r\n            // Add to list of reminded terms\r\n            ops.storedData.remindedTerms[reminderTerm] = appData.terms[reminderTerm].definition;\r\n            i++;\r\n        }\r\n        // Choose terms to  display\r\n        while (i < ops.displayedTerms) {\r\n            let viewedLength = Object.keys(ops.storedData.viewedTerms).length;\r\n\r\n            // If all terms viewed\r\n            if (viewedLength === dataLength) {\r\n\r\n                let viewedSorted = [];\r\n\r\n                // Convert viewed terms to array\r\n                for (let term in ops.storedData.viewedTerms) {\r\n                    viewedSorted.push([term, ops.storedData.viewedTerms[term]]);\r\n                }\r\n                // If reminder term picked remove from selection\r\n                if (ops.storedData.dailyReminder !== undefined) {\r\n                    for (let m=viewedSorted.length-1; m>=0; m--) {\r\n                        if (ops.storedData.dailyReminder.hasOwnProperty(viewedSorted[m][0])) { \r\n                            viewedSorted.splice(m, 1);\r\n                        }\r\n                    }\r\n                }\r\n                // Sort array by view count\r\n                viewedSorted.sort((a, b) => {\r\n                    return a[1] - b[1]\r\n                })\r\n                // Finish off iterator with lowest viewed terms\r\n                while (i < ops.displayedTerms) {\r\n                    listOfTerms.push(viewedSorted[i][0]);\r\n                    i++;\r\n                }\r\n                // Overflow protection\r\n                i++;\r\n            }\r\n            // Still unviewed terms in data\r\n            else {\r\n                let pickedTerm = pickRandom(appData.terms);\r\n\r\n                // Ensure term hasn't been already scanned\r\n                if (!scannedTerms.includes(pickedTerm)) {\r\n                    scannedTerms.push(pickedTerm);\r\n\r\n                    // Ensure term not viewed before\r\n                    if (!ops.storedData.viewedTerms.hasOwnProperty(pickedTerm)) {\r\n                        listOfTerms.push(pickedTerm);\r\n                        ops.storedData.viewedTerms[pickedTerm] = 0;\r\n                        localforage.setItem('ops.storedData', ops.storedData);\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n            // Overflow protection\r\n            if (j > 10000) {\r\n                i = ops.displayedTerms;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // Return final list of terms\r\n    return listOfTerms;\r\n}\r\n\r\n// Handles count of a type of data\r\nconst updateDataCount = function (dataType, termsToAdjust, baseValue) {\r\n\r\n    let dataTypeHolder = ops.storedData[dataType] || {};\r\n\r\n    // If no viewed data, create new \r\n    if (!ops.storedData.hasOwnProperty(dataType)) {\r\n\r\n        for (let value of termsToAdjust) {\r\n            dataTypeHolder[value] = baseValue;\r\n        }\r\n    }\r\n    // If viewed data exists\r\n    else {\r\n        // If viewed term exists, update count\r\n        for (let value of termsToAdjust) {\r\n\r\n            if (ops.storedData[dataType].hasOwnProperty(value)) {\r\n                let count = ops.storedData[dataType][value];\r\n                count += 1;\r\n                dataTypeHolder[value] = count;\r\n            }\r\n            else {\r\n                dataTypeHolder[termsToAdjust] = baseValue;\r\n            }\r\n        }\r\n    }\r\n    // Pass back final object\r\n    return dataTypeHolder;\r\n}","\r\n// Imports\r\nimport { cl, clv } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { createRevealTimer } from 'termInteraction';\r\n\r\n// Exports\r\nexport { viewCreate, addHearts, setScore };\r\n\r\n// Create app view\r\nconst viewCreate = function viewCreate(termsToCreate) {\r\n\r\n    let viewHTML = \"\";\r\n\r\n    // Create HTML for terms\r\n    for (let value of termsToCreate) {\r\n\r\n        // Get terms and definitions from data\r\n        let termValue = appData.terms[value].term;\r\n        let definitionValue = appData.terms[value].definition;\r\n        let supportValue = appData.terms[value].support;\r\n        let revealCounter;\r\n        let viewsCount;\r\n\r\n        // Check storage for revealed count\r\n        if (ops.storedData.revealedTermCount === undefined) {\r\n            viewsCount = 0;\r\n        }\r\n        else {\r\n            viewsCount = ops.storedData.revealedTermCount[value] || 0;\r\n        }\r\n\r\n        // Create terms HTML\r\n        let newHolder =\r\n            `<div class=\"term-wrapper\">\r\n                <p class=\"term-holder\">${termValue}</p>\r\n                <div class=\"definition-wrapper hidden\">\r\n                    <p class=\"definition-holder\">${definitionValue}</p>\r\n                    <div class=\"support-wrapper\">${supportValue}</div>\r\n                </div>\r\n                <p class=\"term-views\">${viewsCount}</p>\r\n                <button class=\"reveal\">Reveal definition</button>\r\n            </div>`;\r\n\r\n        viewHTML += newHolder;\r\n        // Cycle for of loop\r\n    }\r\n    // Add to view\r\n    ops.container.innerHTML = viewHTML;\r\n\r\n    // Add countdown timers to term buttons\r\n    for (let value of termsToCreate) {\r\n\r\n        // Check if timer data exists\r\n        if (ops.storedData.revealCountdowns !== undefined) {\r\n\r\n            // Add countdown timers to buttons\r\n            if (ops.storedData.revealCountdowns[value] !== undefined) {\r\n\r\n                let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n                // Find button node that matches term in DOM\r\n                for (let i = 0; i < revealBtn.length; i++) {\r\n                    let revealTerm = revealBtn[i].parentNode.querySelector('.term-holder').innerHTML;\r\n\r\n                    if (revealTerm === value) {\r\n                        createRevealTimer(revealBtn[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Add hearts to page\r\nconst addHearts = function addHearts() {\r\n    let heartHolder = document.querySelector('.hearts');\r\n    let heartsHTML = \"\";\r\n\r\n    // If no hearts data exists\r\n    if (ops.storedData.hearts === undefined) {\r\n        ops.storedData.hearts = ops.points.hearts;\r\n    }\r\n    for (let i = 0; i < ops.storedData.hearts; i++) {\r\n        heartsHTML += '<p>❤</p>';\r\n    }\r\n    // Add to view\r\n    heartHolder.innerHTML = heartsHTML;\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n}\r\n\r\n\r\n// Sets the score\r\nconst setScore = function setScore() {\r\n\r\n    let scoreHolder = document.querySelector('.score-holder');\r\n\r\n    // Set score if it doesn't exist\r\n    if (ops.storedData.score === undefined) {\r\n        ops.storedData.score = 0;\r\n    }\r\n    \r\n    let score = ops.storedData.score;\r\n\r\n    // Add to view\r\n    scoreHolder.innerHTML = score;\r\n}","\r\n// Imports\r\nimport { cl, clv, pickRandom, checkQuery } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { addHearts } from 'viewCreation';\r\nimport { updateDataCount } from 'termCreation';\r\n\r\n// Exports\r\nexport { createNewQuery };\r\n\r\n// Sets up query\r\nconst createNewQuery = function createNewQuery() {\r\n\r\n    // If no stored data for reveal countdowns\r\n    if (ops.storedData.queryTerms === undefined) {\r\n        ops.storedData.queryTerms = {};\r\n    }\r\n\r\n    // Pick a term for query\r\n    let randomTerm;\r\n    let i = 0;\r\n\r\n    // Set correctTerms storage if not exists\r\n    if (ops.storedData.correctTerms === undefined) {\r\n        ops.storedData.correctTerms = {};\r\n    }\r\n\r\n    // Set incorrectTerms storage if not exists\r\n    if (ops.storedData.incorrectTerms === undefined) {\r\n        ops.storedData.incorrectTerms = {};\r\n    }\r\n\r\n    // Prevent choosing query already answered correct\r\n    while (i < Object.keys(ops.storedData.revealedTermCount).length) {\r\n\r\n        if (ops.storedData.dailyQuery === undefined) {\r\n            // Pick a random term\r\n            randomTerm = pickRandom(ops.storedData.revealedTermCount);\r\n            ops.storedData.dailyQuery = randomTerm;\r\n        }\r\n        else {\r\n            randomTerm = ops.storedData.dailyQuery;\r\n        }\r\n        // If query not from correct terms\r\n        if (!ops.storedData.correctTerms.hasOwnProperty(randomTerm)) {\r\n\r\n            // If query not from daily reminder term\r\n            if (ops.storedData.dailyReminder !== undefined) {\r\n                if (!ops.storedData.dailyReminder.hasOwnProperty(randomTerm)) {\r\n                    queryHandler();\r\n                    break;\r\n                }\r\n            }\r\n            // If query not from daily terms\r\n            else if (!ops.storedData.dailyTerms.hasOwnProperty(randomTerm)) {\r\n                queryHandler();\r\n                break;\r\n            }\r\n        }\r\n        // Else look for another\r\n        i++;\r\n        if (i === Object.keys(ops.storedData.revealedTermCount).length) {\r\n            document.querySelector('.result-holder').innerHTML = \"Reveal more terms to get a query\";\r\n        }\r\n    }\r\n    \r\n    // Build the query\r\n    function queryHandler() {\r\n        let queryWrapper = document.querySelector('.query-wrapper');\r\n        let queryHolder = document.querySelector('.query-holder');\r\n        let querySubmit = document.querySelector('.query-submit');\r\n        let resultHolder = document.querySelector('.result-holder');\r\n        let scoreHolder = document.querySelector('.score-holder');\r\n        let heartHolder = document.querySelector('.hearts');\r\n        let score = parseInt(scoreHolder.innerHTML);\r\n        let definition = appData.terms[randomTerm].definition;\r\n        let count = 0;\r\n\r\n        // Add hearts\r\n        delete ops.storedData.hearts;\r\n        addHearts();\r\n\r\n        // Show the query wrapper\r\n        queryWrapper.classList.remove('hidden');\r\n\r\n        // Set value of query\r\n        queryHolder.innerHTML = randomTerm;\r\n\r\n        // Query outcomes\r\n        querySubmit.addEventListener(\"click\", () => {\r\n            let queryInput = document.querySelector('.query-input').value;\r\n\r\n            if (checkQuery(queryInput, definition) === true) {\r\n                winCase();\r\n            }\r\n            else if (checkQuery(queryInput, definition) === \"mispelled\") {\r\n                winCase(\"mispelled\");\r\n            }\r\n            else if (queryInput === \"\") {\r\n                resultHolder.innerHTML = \"Enter a definition.\";\r\n            }\r\n            else {\r\n                loseCase();\r\n            }\r\n        });\r\n\r\n        // If definition is right\r\n        function winCase(spelling) {\r\n            // Hide the query input\r\n            queryWrapper.classList.add('hidden');\r\n            heartHolder.classList.add('hidden');\r\n            // If mispelled\r\n            if (spelling === \"mispelled\") {\r\n                // Display win message\r\n                resultHolder.innerHTML = \"Well done but check your spelling, the definition for <strong>\\\"\" + randomTerm + \"\\\"</strong> is <strong>\\\"\" + definition + \"\\\"</strong>\";\r\n            }\r\n            else {\r\n                // Display win message\r\n                resultHolder.innerHTML = \"Well done, the definition for <strong>\\\"\" + randomTerm + \"\\\"</strong> is <strong>\\\"\" + definition + \"\\\"</strong>\";\r\n            }\r\n            // Add to score\r\n            score += ops.points.correct;\r\n            // Update view\r\n            scoreHolder.innerHTML = score;\r\n            // Add to stored data\r\n            ops.storedData.score = score;\r\n            ops.storedData.correctTerms[randomTerm] = definition;\r\n            ops.storedData.queryComplete = true;\r\n            delete ops.storedData.dailyQuery;\r\n            // Check if whole term list answered correctly\r\n            if (Object.keys(ops.storedData.correctTerms).length === Object.keys(appData.terms).length) {\r\n                ops.storedData.gameWon = true;\r\n                gameWon();\r\n            }\r\n            // Save to storage\r\n            localforage.setItem('ops.storedData', ops.storedData);\r\n        }\r\n        // If definition is wrong\r\n        function loseCase() {\r\n            let queryInput = document.querySelector('.query-input');\r\n            // Update view\r\n            resultHolder.innerHTML = \"Try again.\";\r\n            // Add placeholder\r\n            queryInput.placeholder = queryInput.value;\r\n            // Remove guess\r\n            queryInput.value = \"\";\r\n            // Lose a heart\r\n            heartHolder.removeChild(heartHolder.getElementsByTagName('p')[0]);\r\n            ops.storedData.hearts -= 1;\r\n            // If all hearts lost\r\n            if (ops.storedData.hearts === 0) {\r\n                // Hide query \r\n                queryWrapper.classList.add('hidden');\r\n                heartHolder.classList.add('hidden');\r\n                // Update DOM\r\n                queryInput.value = \"\";\r\n                queryInput.placeholder = \"Enter the definition\";\r\n                // Update view\r\n                resultHolder.innerHTML = \"Sorry you lose.\";\r\n                // Add to storedDatta \r\n                ops.storedData.incorrectTerms[randomTerm] = definition;\r\n                cl(ops.storedData.incorrectTerms);\r\n                ops.storedData.queryComplete = true;\r\n                delete ops.storedData.hearts;\r\n            }\r\n            // Save to storage\r\n            localforage.setItem('ops.storedData', ops.storedData);\r\n        }\r\n        // If game won\r\n        function gameWon() {\r\n            cl('game won');\r\n        }\r\n    }\r\n}","\r\n// Imports\r\nimport { cl, clv, clickListener } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { createNewQuery } from 'queryInteraction';\r\nimport { updateDataCount } from 'termCreation';\r\nimport { setScore, addHearts } from 'viewCreation';\r\n\r\n// Exports\r\nexport { revealedBtnHandler, createRevealTimer };\r\n\r\n// Handles functions when reveal button clicked\r\nconst revealedBtnHandler = function revealedBtnHandler() {\r\n\r\n    let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n    clickListener(revealBtn, (i) => {\r\n\r\n        // Disabled button prevention\r\n        if (revealBtn[i].classList.contains('disabled')) {\r\n            return false;\r\n        }\r\n\r\n        let term = [revealBtn[i].parentNode.querySelector('.term-holder').innerHTML];\r\n\r\n        // Updates the revealed view counter\r\n        let countHolder = revealBtn[i].parentNode.querySelector('.term-views');\r\n        let definitionWrapper = revealBtn[i].parentNode.querySelector('.definition-wrapper');\r\n        let definitionHolder = revealBtn[i].parentNode.querySelector('.definition-holder');\r\n        let count = parseInt(countHolder.innerHTML);\r\n\r\n        // Show definition\r\n        definitionWrapper.classList.remove('hidden');\r\n\r\n        // Increase count by one\r\n        countHolder.innerHTML = count + 1;\r\n\r\n        // Pass to updateDataCount function\r\n        let dataCount = updateDataCount('revealedTermCount', term, 1);\r\n\r\n        // Set storedData\r\n        ops.storedData.revealedTermCount = dataCount;\r\n\r\n        // Daily reveal bonus\r\n        let revealBonusCount;\r\n\r\n        // If no daily bonus data\r\n        if (ops.storedData.revealDailyBonus === undefined) {\r\n            ops.storedData.revealDailyBonus = {};\r\n        }\r\n        // If no existing term bonus\r\n        if (ops.storedData.revealDailyBonus[term] === undefined) {\r\n            revealBonusCount = 1;\r\n        }\r\n        // Add one to daily bonus\r\n        else {\r\n            revealBonusCount = ops.storedData.revealDailyBonus[term];\r\n            revealBonusCount += 1;\r\n        }\r\n        // If bonus is met\r\n        if (revealBonusCount === ops.revealDailyBonusTarget) {\r\n            // If daily bonus not already triggered\r\n            if (ops.storedData.revealDailyBonus.complete === false) {\r\n                // Keep query active \r\n                ops.storedData.queryComplete = false;\r\n                // Create a new query\r\n                createNewQuery();\r\n            }\r\n            // Set only once a day\r\n            ops.storedData.revealDailyBonus.complete = true;\r\n            ops.storedData.score += ops.points.dailyBonus;\r\n            setScore();\r\n        }\r\n        ops.storedData.revealDailyBonus[term] = revealBonusCount;\r\n\r\n        // Save to storage\r\n        localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n        // Starts a timer \r\n        createRevealTimer(revealBtn[i]);\r\n    });\r\n}\r\n\r\n// Adds a timer to the reveal button\r\nconst createRevealTimer = function createRevealTimer(revealBtn) {\r\n\r\n    // If no stored data for reveal countdowns\r\n    if (ops.storedData.revealCountdowns === undefined) {\r\n        ops.storedData.revealCountdowns = {};\r\n    }\r\n\r\n    let term = [revealBtn.parentNode.querySelector('.term-holder').innerHTML];\r\n\r\n    let minutes = ops.counterMins;\r\n    let seconds = ops.counterSecs;\r\n    let remainingMinutes;\r\n    let remainingSeconds;\r\n    let startTime;\r\n    let timerEnded;\r\n\r\n    // New timer\r\n    if (ops.storedData.revealCountdowns[term] === undefined) {\r\n\r\n        // Get a new time\r\n        startTime = new Date().getTime();\r\n\r\n        // Set storedData\r\n        ops.storedData.revealCountdowns[term] = {\r\n            \"startTime\": startTime,\r\n            \"timerEnded\": false\r\n        };\r\n\r\n        // Start timer\r\n        startTimer();\r\n    }\r\n    // Existing timer\r\n    else {\r\n        // Start timer\r\n        startTimer();\r\n    }\r\n\r\n    function startTimer() {\r\n        let nowTime = new Date().getTime();\r\n\r\n        // Disable button\r\n        revealBtn.classList.add('disabled');\r\n        revealBtn.setAttribute(\"disabled\", true);\r\n\r\n        // Get terms start time for countdown\r\n        startTime = ops.storedData.revealCountdowns[term].startTime;\r\n        timerEnded = ops.storedData.revealCountdowns[term].timerEnded;\r\n\r\n        // Get difference in seconds\r\n        let diffSecs = Math.floor((nowTime - startTime) / 1000);\r\n        // Get total in seconds\r\n        let totalSecs = (ops.counterMins * 60) + seconds;\r\n\r\n        // NowTime overtaken startTime\r\n        if (diffSecs >= totalSecs) {\r\n            timerEnded = true;\r\n            // Stop interval\r\n            clearInterval(ops.storedData.revealCountdowns[term].timerUpdate);\r\n            // Clear storage for term timer\r\n            delete ops.storedData.revealCountdowns[term];\r\n        }\r\n        // Timer stopped, return to normal\r\n        if (timerEnded === true) {\r\n            localforage.setItem('ops.storedData', ops.storedData);\r\n            return false;\r\n        }\r\n        // Set remaining time \r\n        remainingSeconds = totalSecs - diffSecs;\r\n    }\r\n\r\n    // Set start time to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    let timeout;\r\n    let checkCount = 0;\r\n\r\n    // If timer is active   \r\n    if (timerEnded === false) {\r\n\r\n        // Start timer interval\r\n        ops.storedData.revealCountdowns[term].timerUpdate = setInterval(() => {\r\n            // Resync timer in some devices when off screen\r\n            checkCount += 1;\r\n            if (checkCount % 5 === 0) {\r\n                startTimer();\r\n            }\r\n            // Call UI timer build\r\n            buttonTimer();\r\n        }, 1000)\r\n    }\r\n\r\n    // Builds the timer\r\n    function buttonTimer() {\r\n        let displayedMinutes = Math.floor(remainingSeconds / 60);\r\n        let displayedSeconds = remainingSeconds % 60;\r\n        let hiddenZero = '';\r\n\r\n        // Timer end\r\n        if (remainingSeconds === 0) {\r\n            revealBtn.innerHTML = (\"Reveal\");\r\n            revealBtn.classList.remove('disabled');\r\n            revealBtn.disabled = false;\r\n            return false;\r\n        }\r\n\r\n        // Handle issues like zero index\r\n        if (displayedSeconds < 10 && displayedSeconds >= 0) {\r\n            hiddenZero = '0';\r\n        }\r\n        if (remainingSeconds === 60) {\r\n            displayedSeconds = '00';\r\n        }\r\n        // Update DOM\r\n        revealBtn.innerHTML = (displayedMinutes + ':' + hiddenZero + displayedSeconds);\r\n\r\n        // Decrease timer\r\n        remainingSeconds -= 1;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n"]}