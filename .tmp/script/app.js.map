{"version":3,"sources":["app.js","helperFunctions.js","verbs.js","termCreation.js","termInteraction.js","viewCreation.js"],"names":["app","ready","fn","document","readyState","addEventListener","cl","log","console","getTodaysDate","todayDate","day","Date","getDate","month","getMonth","push","getTimeComplete","timeComplete","hour","getHours","minute","getMinutes","second","getSeconds","arrayCheck","arr1","arr2","length","i","resetData","querySelector","e","preventDefault","localforage","clear","clickListener","elements","clickFunction","appData","terms","verb_1","term","definition","verb_2","verb_3","verb_4","verb_5","getListOfTerms","j","listOfTerms","scannedTerms","dataLength","Object","keys","ops","displayedTerms","storedData","firstTime","undefined","pickedTerm","pickRandom","includes","viewedLength","viewedTerms","viewedSorted","sort","a","b","hasOwnProperty","setItem","Math","random","updateDataCount","dataType","termsToAdjust","baseValue","dataTypeHolder","value","count","revealedBtnHandler","revealBtn","querySelectorAll","classList","contains","parentNode","innerHTML","countHolder","definitionHolder","parseInt","add","dataCount","revealedTermCount","createRevealTimer","revealCountdowns","minutes","seconds","startTime","getRemainingSeconds","nowTime","timerEnded","abs","setInterval","displayedMinutes","displayedSeconds","hiddenZero","setAttribute","viewCreate","termsToCreate","viewHTML","termValue","definitionValue","revealCounter","viewsCount","newHolder","container","revealTerm","addDay","debug","openApp","then","numberOfKeys","initialise","catch","err","createTermsHandler","getItem","checkData","retrievedData","todaysDate","storedDate","addOneDay","Array","from","dateOpened","dailyTerms","pickedTerms","ops$1"],"mappings":";;;;AAAA,IAAIA,MAAO,YAAY;AACvB;;ACDA;;ADKA;;ACFA,aAAgBC,KAAhB,CAAsBC,EAAtB,EAA0B;AACtB,YAAIC,SAASC,UAAT,IAAuB,SAA3B,EAAsC;AAClCF;AACH,SAFD,MAEO;AACHC,qBAASE,gBAAT,CAA0B,kBAA1B,EAA8CH,EAA9C;AACH;AACJ;;ADKD;ACFA,aAAgBI,EAAhB,CAAmBC,GAAnB,EAAwB;AACpBC,gBAAQD,GAAR,CAAYA,GAAZ;AACH;;ADKD;;;AAGA;ACAA,aAAgBE,aAAhB,GAAgC;;ADG5B;ACAA,YAAIC,YAAY,EAAhB;AACA,YAAIC,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,YAAIC,QAAQ,IAAIF,IAAJ,GAAWG,QAAX,EAAZ;;AAEAL,kBAAUM,IAAV,CAAe,CAACL,GAAD,EAAMG,KAAN,CAAf;;AAEA,eAAOJ,SAAP;AACH;;ADGD;ACAA,aAAgBO,eAAhB,GAAkC;;ADG9B;ACAA,YAAIC,eAAe,EAAnB;AACA,YAAIP,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,YAAIC,QAAQ,IAAIF,IAAJ,GAAWG,QAAX,EAAZ;AACA,YAAII,OAAO,IAAIP,IAAJ,GAAWQ,QAAX,EAAX;AACA,YAAIC,SAAS,IAAIT,IAAJ,GAAWU,UAAX,EAAb;AACA,YAAIC,SAAS,IAAIX,IAAJ,GAAWY,UAAX,EAAb;;AAEAN,qBAAaF,IAAb,CAAkB,CAACL,GAAD,EAAMG,KAAN,EAAaK,IAAb,EAAmBE,MAAnB,EAA2BE,MAA3B,CAAlB;;AAEA,eAAOL,YAAP;AACH;;ADGD;ACAA,aAAgBO,UAAhB,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;;AAEnC,YAAID,KAAKE,MAAL,KAAgBD,KAAKC,MAAzB,EACI,OAAO,KAAP;AACJ,aAAK,IAAIC,IAAIH,KAAKE,MAAlB,EAA0BC,GAA1B,GAAgC;AAC5B,gBAAIH,KAAKG,CAAL,MAAYF,KAAKE,CAAL,CAAhB,EACI,OAAO,KAAP;AACP;;AAED,eAAO,IAAP;AACH;;ADGD;ACAA,aAAgBC,SAAhB,GAA4B;;AAExB3B,iBAAS4B,aAAT,CAAuB,QAAvB,EAAiC1B,gBAAjC,CAAkD,OAAlD,EAA2D,UAAC2B,CAAD,EAAO;AAC9DA,cAAEC,cAAF;AACAC,wBAAYC,KAAZ;AACA7B,eAAG,WAAH;AACH,SAJD;AAKH;;ADID;ACAA,aAAgB8B,aAAhB,CAA8BC,QAA9B,EAAwCC,aAAxC,EAAuD;AAAA,mCAE1CT,CAF0C;AAG/CQ,qBAASR,CAAT,EAAYxB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAAEiC,8BAAcT,CAAd;AAAkB,aAAhE;AAH+C;;AAEnD,aAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIQ,SAAST,MAA7B,EAAqCC,GAArC,EAA0C;AAAA,kBAAjCA,CAAiC;AAEzC;ADEJ;;AEjFD;;AAEA,QAAAU,UAAe;;AAEXC,eAAO;AACHC,oBAAQ,EAAEC,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EADL;AAEHC,oBAAQ,EAAEF,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAFL;AAGHE,oBAAQ,EAAEH,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAHL;AAIHG,oBAAQ,EAAEJ,MAAM,QAAR,EAAkBC,YAAY,OAA9B,EAJL;AAKHI,oBAAQ,EAAEL,MAAM,QAAR,EAAkBC,YAAY,OAA9B;AALL;AAFI,KAAf;;ACDA;AACA;AAQA,QAAMK,iBAAiB,SAASA,cAAT,GAA0B;;AAE7C,YAAInB,IAAI,CAAR;AACA,YAAIoB,IAAI,CAAR;AACA,YAAIC,cAAc,EAAlB;AACA,YAAIC,eAAe,EAAnB;AACA,YAAMC,aAAaC,OAAOC,IAAP,CAAYf,QAAQC,KAApB,EAA2BZ,MAA9C;;AH0FA;AGvFA,YAAI2B,MAAIC,cAAJD,GAAqBH,UAAzB,EAAqC;AACjCG,kBAAIC,cAAJD,GAAqBH,UAArBG;AACH;;AH0FD;AGvFA,YAAIA,MAAIE,UAAJF,CAAeG,SAAfH,KAA6BI,SAAjC,EAA4C;;AAExC,mBAAO9B,IAAI0B,MAAIC,cAAf,EAA+B;AAC3B,oBAAII,aAAaC,YAAjB;;AH0FA;AGvFA,oBAAI,CAACX,YAAYY,QAAZ,CAAqBF,UAArB,CAAL,EAAuC;AACnCV,gCAAYlC,IAAZ,CAAiB4C,UAAjB;AACA/B;AACH;AACJ;AACJ;AHyFD;AGpGA,aAaK;;AAED,uBAAOA,IAAI0B,MAAIC,cAAf,EAA+B;AAC3B,wBAAIO,eAAeV,OAAOC,IAAP,CAAYC,MAAIE,UAAJF,CAAeS,WAA3B,EAAwCpC,MAA3D;;AH0FA;AGvFA,wBAAImC,iBAAiBX,UAArB,EAAiC;;AAE7B,4BAAIa,eAAe,EAAnB;;AH0FA;AGvFA,6BAAK,IAAIvB,IAAT,IAAiBa,MAAIE,UAAJF,CAAeS,WAAhC,EAA6C;AACzCC,yCAAajD,IAAb,CAAkB,CAAC0B,IAAD,EAAOa,MAAIE,UAAJF,CAAeS,WAAfT,CAA2Bb,IAA3Ba,CAAP,CAAlB;AACH;;AH0FD;AGvFAU,qCAAaC,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACxB,mCAAOD,EAAE,CAAF,IAAOC,EAAE,CAAF,CAAd;AACH,yBAFD;;AH4FA;AGvFA,+BAAOvC,IAAI0B,MAAIC,cAAf,EAA+B;AAC3BN,wCAAYlC,IAAZ,CAAiBiD,aAAapC,CAAb,EAAgB,CAAhB,CAAjB;AACAA;AACH;AHyFD;AGvFAA;AACH,qBArBD,MAsBK;AACD,4BAAI+B,cAAaC,YAAjB;;AH0FA;AGvFA,4BAAI,CAACV,aAAaW,QAAb,CAAsBF,WAAtB,CAAL,EAAwC;AACpCT,yCAAanC,IAAb,CAAkB4C,WAAlB;;AH0FA;AGvFA,gCAAI,CAACL,MAAIE,UAAJF,CAAeS,WAAfT,CAA2Bc,cAA3Bd,CAA0CK,WAA1CL,CAAL,EAA4D;AACxDL,4CAAYlC,IAAZ,CAAiB4C,WAAjB;AACAL,sCAAIE,UAAJF,CAAeS,WAAfT,CAA2BK,WAA3BL,IAAyC,CAAzCA;AACArB,4CAAYoC,OAAZ,CAAoB,gBAApB,EAAsCf,MAAIE,UAA1C;AACA5B;AACH;AACJ;AACJ;AHyFD;AGvFA,wBAAIoB,IAAI,IAAR,EAAc;AACVpB,4BAAI0B,MAAIC,cAAR;AACH;AACDP;AACH;AACJ;AHyFD;AGvFA,iBAASY,UAAT,GAAsB;AAClB,gBAAIP,OAAOD,OAAOC,IAAP,CAAYf,QAAQC,KAApB,CAAX;AAAA,gBACIoB,aAAaN,KAAKA,KAAK1B,MAAL,GAAc2C,KAAKC,MAAL,EAAd,IAA+B,CAApC,CADjB;;AAGA,mBAAOZ,UAAP;AACH;AHyFD;AGvFA,eAAOV,WAAP;AACH,KAvFD;;AHiLA;AGvFA,QAAMuB,kBAAkB,SAAlBA,eAAkB,CAAUC,QAAV,EAAoBC,aAApB,EAAmCC,SAAnC,EAA8C;;AAElE,YAAIC,iBAAiBtB,MAAIE,UAAJF,CAAemB,QAAfnB,KAA4B,EAAjD;;AH0FA;AGvFA,YAAI,CAACA,MAAIE,UAAJF,CAAec,cAAfd,CAA8BmB,QAA9BnB,CAAL,EAA8C;AAAA;AAAA;AAAA;;AAAA;;AAE1C,qCAAkBoB,aAAlB,8HAAiC;AAAA,wBAAxBG,KAAwB;;AAC7BD,mCAAeC,KAAf,IAAwBF,SAAxB;AACH;AAJyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7C;AHyFD;AG9FA,aAOK;AHyFD;AGzFC;AAAA;AAAA;;AAAA;AAED,0CAAkBD,aAAlB,mIAAiC;AAAA,4BAAxBG,MAAwB;;;AAE7B,4BAAIvB,MAAIE,UAAJF,CAAemB,QAAfnB,EAAyBc,cAAzBd,CAAwCuB,MAAxCvB,CAAJ,EAAoD;AAChD,gCAAIwB,QAAQxB,MAAIE,UAAJF,CAAemB,QAAfnB,EAAyBuB,MAAzBvB,CAAZ;AACAwB,qCAAS,CAAT;AACAF,2CAAeC,MAAf,IAAwBC,KAAxB;AACH,yBAJD,MAKK;AACDF,2CAAeF,aAAf,IAAgCC,SAAhC;AACH;AACJ;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaJ;AHyFD;AGvFA,eAAOC,cAAP;AACH,KA5BD;;ACnGA;AACA;AASA,QAAMG,qBAAqB,SAASA,kBAAT,GAA8B;;AAErD,YAAIC,YAAY9E,SAAS+E,gBAAT,CAA0B,SAA1B,CAAhB;;AAEA9C,sBAAc6C,SAAd,EAAyB,UAACpD,CAAD,EAAO;;AAE5B,gBAAIoD,UAAUpD,CAAV,EAAasD,SAAb,CAAuBC,QAAvB,CAAgC,UAAhC,CAAJ,EAAiD;AAC7C,uBAAO,KAAP;AACH;AACD,gBAAI1C,OAAO,CAACuC,UAAUpD,CAAV,EAAawD,UAAb,CAAwBtD,aAAxB,CAAsC,cAAtC,EAAsDuD,SAAvD,CAAX;;AJmNA;AIhNA,gBAAIC,cAAcN,UAAUpD,CAAV,EAAawD,UAAb,CAAwBtD,aAAxB,CAAsC,aAAtC,CAAlB;AACA,gBAAIyD,mBAAmBP,UAAUpD,CAAV,EAAawD,UAAb,CAAwBtD,aAAxB,CAAsC,oBAAtC,CAAvB;AACA,gBAAIgD,QAAQU,SAASF,YAAYD,SAArB,CAAZ;;AJmNA;AIhNAE,6BAAiBL,SAAjB,CAA2BO,GAA3B,CAA+B,OAA/B;;AJmNA;AIhNAH,wBAAYD,SAAZ,GAAwBP,QAAQ,CAAhC;;AJmNA;AIhNA,gBAAIY,YAAYlB,gBAAgB,mBAAhB,EAAqC/B,IAArC,EAA2C,CAA3C,CAAhB;;AJmNA;AIhNAa,kBAAIE,UAAJF,CAAeqC,iBAAfrC,GAAmCoC,SAAnCpC;;AJmNA;AIhNAsC,8BAAkBZ,UAAUpD,CAAV,CAAlB;;AJmNA;AIhNAK,wBAAYoC,OAAZ,CAAoB,gBAApB,EAAsCf,MAAIE,UAA1C;AACH,SA7BD;AA8BH,KAlCD;;AJqPA;AIhNA,QAAMoC,oBAAoB,SAASA,iBAAT,CAA2BZ,SAA3B,EAAsC;;AJmN5D;AIhNA,YAAI1B,MAAIE,UAAJF,CAAeuC,gBAAfvC,KAAoCI,SAAxC,EAAmD;AAC/CJ,kBAAIE,UAAJF,CAAeuC,gBAAfvC,GAAkC,EAAlCA;AACH;;AAED,YAAIuC,mBAAmBvC,MAAIE,UAAJF,CAAeuC,gBAAfvC,IAAmC,EAA1D;AACA,YAAIb,OAAO,CAACuC,UAAUI,UAAV,CAAqBtD,aAArB,CAAmC,cAAnC,EAAmDuD,SAApD,CAAX;AACA,YAAIS,gBAAJ;AACA,YAAIC,gBAAJ;AACA,YAAIC,kBAAJ;;AJmNA;AIhNA,YAAIH,iBAAiBpD,IAAjB,MAA2BiB,SAA/B,EAA0C;;AAEtCoC,sBAAU,EAAV;AACAC,sBAAU,EAAV;AACAC,wBAAYhF,iBAAZ;;AJmNA;AIhNAsC,kBAAIE,UAAJF,CAAeuC,gBAAfvC,CAAgCb,IAAhCa,IAAwC0C,SAAxC1C;AACH;AJkND;AI1NA,aAUK;AAAA;AJ6OD;AI7OC,wBA6BQ2C,mBA7BR,GA6BD,SAASA,mBAAT,GAA+B;AJkN3B;AIhNA,4BAAID,UAAU,CAAV,IAAeE,QAAQ,CAAR,CAAnB,EAA+B;AJkN3B;AIhNAH,sCAAUC,UAAU,CAAV,IAAeE,QAAQ,CAAR,CAAzB;AACH;AJkND;AIrNA,6BAKK;AACDH,0CAAU,MAAMG,QAAQ,CAAR,IAAaF,UAAU,CAAV,CAAnB,CAAV;AACH;AACD,+BAAOD,OAAP;AACH,qBAxCA;;AJ2PD;;;AI1PA,wBAAIG,UAAUlF,kBAAkB,CAAlB,CAAd;AACA,wBAAImF,aAAa,KAAjB;;AJmNA;AIhNAH,gCAAYH,iBAAiBpD,IAAjB,EAAuB,CAAvB,CAAZ;;AJmNA;;AAEA;AIhNA,wBAAIuD,UAAU,CAAV,MAAiBE,QAAQ,CAAR,CAAjB,IAA+BF,UAAU,CAAV,MAAiBE,QAAQ,CAAR,CAApD,EAAgE;AAC5DC,qCAAa,IAAb;AACH;AJkND;AIpNA,yBAIK,IAAI7B,KAAK8B,GAAL,CAASJ,UAAU,CAAV,IAAeE,QAAQ,CAAR,CAAxB,KAAuC,CAA3C,EAA8C;AAC/CC,yCAAa,IAAb;AACH;AJkND;AIpNK,6BAIA,IAAIH,UAAU,CAAV,IAAeE,QAAQ,CAAR,CAAnB,EAA+B;AJkNhC;AIhNAJ,0CAAUE,UAAU,CAAV,IAAeE,QAAQ,CAAR,CAAzB;AACAH,0CAAUE,qBAAV;AACH;AJkND;AItNK,iCAMA;AACDH,8CAAU,MAAMI,QAAQ,CAAR,IAAaF,UAAU,CAAV,CAAnB,CAAV;AACAD,8CAAUE,qBAAV;AACH,iCAgBD,IAAIE,eAAe,IAAnB,EAAyB;AACrB;AAAA,+BAAO;AAAP;AACH;AA7CA;;AAAA;AA8CJ;;AJmND;AIhNAlE,oBAAYoC,OAAZ,CAAoB,gBAApB,EAAsCf,MAAIE,UAA1C;;AJmNA;AIhNA6C,oBAAY,YAAM;AACd,gBAAIC,mBAAmBR,OAAvB;AACA,gBAAIS,mBAAmBR,OAAvB;AACA,gBAAIS,aAAa,EAAjB;;AJmNA;AIhNA,gBAAIT,UAAU,EAAV,IAAgBA,UAAU,CAA9B,EAAiC;AAC7BS,6BAAa,GAAb;AACH;AACD,gBAAIT,YAAY,CAAhB,EAAmB;AACfA,0BAAU,EAAV;AACAD,2BAAW,CAAX;AACH;AACD,gBAAIC,YAAY,EAAhB,EAAoB;AAChBQ,mCAAmB,IAAnB;AACH;;AJmND;AIhNAvB,sBAAUK,SAAV,GAAuBiB,mBAAmB,GAAnB,GAAyBE,UAAzB,GAAsCD,gBAA7D;AACAvB,sBAAUE,SAAV,CAAoBO,GAApB,CAAwB,UAAxB;AACAT,sBAAUyB,YAAV,CAAuB,UAAvB,EAAmC,IAAnC;;AJmNA;AIhNAV,uBAAW,CAAX;AACH,SAxBD,EAwBG,IAxBH;AAyBH,KArGD;;AC/CA;AACA;AASA,QAAMW,aAAa,SAASA,UAAT,CAAoBC,aAApB,EAAmC;;AAElD,YAAIC,WAAW,EAAf;;ALiWA;AKnWkD;AAAA;AAAA;;AAAA;AAKlD,kCAAkBD,aAAlB,mIAAiC;AAAA,oBAAxB9B,KAAwB;;;ALiW7B;AK9VA,oBAAIgC,YAAYvE,QAAQC,KAAR,CAAcsC,KAAd,EAAqBpC,IAArC;AACA,oBAAIqE,kBAAkBxE,QAAQC,KAAR,CAAcsC,KAAd,EAAqBnC,UAA3C;AACA,oBAAIqE,sBAAJ;AACA,oBAAIC,mBAAJ;;ALiWA;AK9VA,oBAAI1D,MAAIE,UAAJF,CAAeqC,iBAAfrC,KAAqCI,SAAzC,EAAoD;AAChDsD,iCAAa,CAAb;AACH,iBAFD,MAGK;AACDA,iCAAa1D,MAAIE,UAAJF,CAAeqC,iBAAfrC,CAAiCuB,KAAjCvB,KAA2C,CAAxD;AACH;;ALiWD;AK9VA,oBAAI2D,oFAE6BJ,SAF7B,2DAGmCC,eAHnC,oDAI4BE,UAJ5B,gGAAJ;;AAQAJ,4BAAYK,SAAZ;ALgWA;AK9VH;ALgWD;AKhYkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkClD3D,cAAI4D,SAAJ5D,CAAc+B,SAAd/B,GAA0BsD,QAA1BtD;;ALiWA;AKnYkD;AAAA;AAAA;;AAAA;AAqClD,kCAAkBqD,aAAlB,mIAAiC;AAAA,oBAAxB9B,OAAwB;;;ALiW7B;AK9VA,oBAAIvB,MAAIE,UAAJF,CAAeuC,gBAAfvC,KAAoCI,SAAxC,EAAmD;;ALiW/C;AK9VA,wBAAIJ,MAAIE,UAAJF,CAAeuC,gBAAfvC,CAAgCuB,OAAhCvB,MAA2CI,SAA/C,EAA0D;;AAEtD,4BAAIsB,YAAY9E,SAAS+E,gBAAT,CAA0B,SAA1B,CAAhB;;ALiWA;AK9VA,6BAAK,IAAIrD,IAAI,CAAb,EAAgBA,IAAIoD,UAAUrD,MAA9B,EAAsCC,GAAtC,EAA2C;AACvC,gCAAIuF,aAAanC,UAAUpD,CAAV,EAAawD,UAAb,CAAwBtD,aAAxB,CAAsC,cAAtC,EAAsDuD,SAAvE;;AAEA,gCAAI8B,eAAetC,OAAnB,EAA0B;AACtBe,kDAAkBZ,UAAUpD,CAAV,CAAlB;AACH;AACJ;AACJ;AACJ;AACJ;AAzDiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0DrD,KA1DD;;ALVA;AACA;AASA,QAAI0B,QAAM;AACNC,wBAAgB,CADV;AAEN2D,mBAAWhH,SAAS4B,aAAT,CAAuB,YAAvB,CAFL;AAGNsF,gBAAQ,IAHF;AAINC,eAAO,IAJD;AAKN7D,oBAAY;AALN,KAAV;;AAqaA;AA5ZAxD,UAAM,YAAY;AACd;;AACAsH;AA8ZA;AA5ZAzF;AACH,KALD;;AAoaA;AA5ZA,QAAMyF,UAAU,SAASA,OAAT,GAAmB;;AA+Z/B;AA5ZArF,oBAAYN,MAAZ,GAAqB4F,IAArB,CAA0B,wBAAgB;;AA+ZtC;AA5ZA,gBAAIC,iBAAiB,CAArB,EAAwB;AACpB/D;AACH;AA8ZD;AAhaA,iBAIK;AACDH,0BAAIE,UAAJF,CAAeG,SAAfH,GAA2B,KAA3BA;AACAmE;AACH;AACJ,SAXD,EAWGC,KAXH,CAWS,eAAO;AACZnH,oBAAQD,GAAR,CAAYqH,GAAZ;AACH,SAbD;AAcH,KAjBD;;AAgbA;AA5ZA,QAAMlE,YAAY,SAASA,SAAT,GAAqB;;AA+ZnC;AA5ZAmE;;AA+ZA;AA5ZAtE,cAAIE,UAAJF,CAAeG,SAAfH,GAA2B,KAA3BA;;AA+ZA;AA5ZArB,oBAAYoC,OAAZ,CAAoB,gBAApB,EAAsCf,MAAIE,UAA1C;AACH,KAVD;;AAyaA;AA5ZA,QAAMiE,aAAa,SAASA,UAAT,GAAsB;;AA+ZrC;AA5ZAxF,oBAAY4F,OAAZ,CAAoB,gBAApB,EAAsCN,IAAtC,CAA2C,yBAAiB;AACxDO,sBAAUC,aAAV;AACH,SAFD,EAEGL,KAFH,CAES,eAAO;AACZnH,oBAAQD,GAAR,CAAYqH,GAAZ;AACH,SAJD;;AAmaA;AA5ZA,iBAASG,SAAT,CAAmBC,aAAnB,EAAkC;;AA+Z9B;AA5ZAzE,kBAAIE,UAAJF,GAAiByE,aAAjBzE;;AA+ZA;AA5ZA,gBAAI0E,aAAaxH,eAAjB;AACA,gBAAIyH,aAAa,EAAjB;AACA,gBAAIC,YAAY,IAAhB;;AA+ZA;AA5ZAD,yBAAaE,MAAMC,IAAN,CAAWL,cAAcM,UAAzB,CAAb;;AA+ZA;AA5ZA,gBAAI7G,WAAWwG,UAAX,EAAuBC,UAAvB,MAAuC,IAA3C,EAAiD;AAC7C,oBAAI3E,MAAI8D,MAAJ9D,KAAe,IAAnB,EAAyB;AAAEsE;AAAuB,iBAAlD,MACK;AAAElB,+BAAWqB,cAAcO,UAAzB;AAAuC;AACjD;AA8ZD;AAjaA,iBAKK;AACDV;AACH;AACJ;AACJ,KAjCD;;AAgcA;AA5ZA,QAAMA,qBAAqB,SAASA,kBAAT,GAA8B;;AA+ZrD;AA5ZA,YAAIW,cAAcxF,gBAAlB;;AA+ZA;AA5ZA2D,mBAAW6B,WAAX;;AA+ZA;AA5ZAjF,cAAIE,UAAJF,CAAe+E,UAAf/E,GAA4B9C,eAA5B8C;AACAA,cAAIE,UAAJF,CAAegF,UAAfhF,GAA4BiF,WAA5BjF;AACAA,cAAIE,UAAJF,CAAeS,WAAfT,GAA6BkB,gBAAgB,aAAhB,EAA+B+D,WAA/B,EAA4C,CAA5C,CAA7BjF;;AA+ZA;AA5ZArB,oBAAYoC,OAAZ,CAAoB,gBAApB,EAAsCf,MAAIE,UAA1C;;AA+ZA;AA5ZAuB;;AA+ZA;AA5ZA,YAAIzB,MAAI+D,KAAJ/D,KAAc,IAAlB,EAAwB;AACpBjD,eAAGiD,MAAIE,UAAP;AACAnD,eAAG,uBAAH;AACAA,eAAGiD,MAAIE,UAAJF,CAAeqC,iBAAlB;AACAtF,eAAG,qBAAH;AACAA,eAAGiD,MAAIE,UAAJF,CAAeS,WAAlB;AACA1D,eAAG,uBAAH;AACAA,eAAGiD,MAAIE,UAAJF,CAAeuC,gBAAlB;AACH;AACJ,KA7BD;;AA4bA,WAAO2C,KAAP;AAEC,CA/hBU,EAAX","file":"app.js","sourcesContent":["\r\n// Imports\r\nimport { ready, cl, clv, resetData, arrayCheck, getTodaysDate } from 'helperFunctions';\r\nimport { getListOfTerms, updateDataCount } from 'termCreation';\r\nimport { revealedBtnHandler } from 'termInteraction';\r\nimport { viewCreate } from 'viewCreation';\r\n\r\n// Exports\r\nexport default ops;\r\n\r\n// Global options\r\nlet ops = {\r\n    displayedTerms: 3,\r\n    container: document.querySelector(\".container\"),\r\n    addDay: true,\r\n    debug: true,\r\n    storedData: {}\r\n}\r\n\r\n// Initialise modules on load\r\nready(function () {\r\n    'use strict';\r\n    openApp();\r\n    // Resets button\r\n    resetData();\r\n});\r\n\r\n// Runs when app opens\r\nconst openApp = function openApp() {\r\n\r\n    // Check if this is the first time app has run\r\n    localforage.length().then(numberOfKeys => {\r\n\r\n        // If first time\r\n        if (numberOfKeys === 0) {\r\n            firstTime();\r\n        }\r\n        // Not first time\r\n        else {\r\n            ops.storedData.firstTime = false;\r\n            initialise();\r\n        }\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\n// Runs if first time app has run\r\nconst firstTime = function firstTime() {\r\n\r\n    // Create terms\r\n    createTermsHandler();\r\n\r\n    // Set first time to false\r\n    ops.storedData.firstTime = false;\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n}\r\n\r\n// Initialises app\r\nconst initialise = function initialise() {\r\n\r\n    // Get stored data\r\n    localforage.getItem('ops.storedData').then(retrievedData => {\r\n        checkData(retrievedData);\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n\r\n    // Handle retrieved data\r\n    function checkData(retrievedData) {\r\n\r\n        // Set data in app from storage\r\n        ops.storedData = retrievedData;\r\n\r\n        // Check if a new day\r\n        let todaysDate = getTodaysDate();\r\n        let storedDate = [];\r\n        let addOneDay = true;\r\n\r\n        // Get date last stored\r\n        storedDate = Array.from(retrievedData.dateOpened);\r\n\r\n        // If same day, use dailyTerms data\r\n        if (arrayCheck(todaysDate, storedDate) === true) {\r\n            if (ops.addDay === true) { createTermsHandler(); }\r\n            else { viewCreate(retrievedData.dailyTerms); }\r\n        }\r\n        // Else create new terms\r\n        else {\r\n            createTermsHandler();\r\n        }\r\n    }\r\n}\r\n\r\n// Calls functions to handle term creation\r\nconst createTermsHandler = function createTermsHandler() {\r\n\r\n    // Get initial terms\r\n    let pickedTerms = getListOfTerms();\r\n\r\n    // Create initial view\r\n    viewCreate(pickedTerms);\r\n\r\n    // Create opened date, daily terms, viewed terms\r\n    ops.storedData.dateOpened = getTodaysDate();\r\n    ops.storedData.dailyTerms = pickedTerms;\r\n    ops.storedData.viewedTerms = updateDataCount('viewedTerms', pickedTerms, 0);\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    // Handles events for revealed terms\r\n    revealedBtnHandler();\r\n\r\n    // Debug code\r\n    if (ops.debug === true) {\r\n        cl(ops.storedData);\r\n        cl('Revealed terms count:');\r\n        cl(ops.storedData.revealedTermCount);\r\n        cl('Viewed terms count:');\r\n        cl(ops.storedData.viewedTerms);\r\n        cl('Revealed terms timer:');\r\n        cl(ops.storedData.revealCountdowns);\r\n    };\r\n}\r\n\r\n","//- Global helper functions\r\n\r\n// JS ready\r\nexport function ready(fn) {\r\n    if (document.readyState != 'loading') {\r\n        fn();\r\n    } else {\r\n        document.addEventListener('DOMContentLoaded', fn);\r\n    }\r\n}\r\n\r\n// Console log -> cl\r\nexport function cl(log) {\r\n    console.log(log);\r\n}\r\n\r\n// Console log plus value\r\nexport function clv(term, log) {\r\n    console.log(term + '= ' + log);\r\n}\r\n\r\n// Creates array of day and month\r\nexport function getTodaysDate() {\r\n\r\n    // Get current day + month\r\n    let todayDate = [];\r\n    let day = new Date().getDate()\r\n    let month = new Date().getMonth();\r\n\r\n    todayDate.push([day, month]);\r\n\r\n    return todayDate;\r\n}\r\n\r\n// Creates array of day, month, hour, minute, second\r\nexport function getTimeComplete() {\r\n\r\n    // Get complete date time value \r\n    let timeComplete = [];\r\n    let day = new Date().getDate();\r\n    let month = new Date().getMonth();\r\n    let hour = new Date().getHours();\r\n    let minute = new Date().getMinutes();\r\n    let second = new Date().getSeconds();\r\n\r\n    timeComplete.push([day, month, hour, minute, second]);\r\n\r\n    return timeComplete;\r\n}\r\n\r\n// Check if arrays are the same\r\nexport function arrayCheck(arr1, arr2) {\r\n\r\n    if (arr1.length !== arr2.length)\r\n        return false;\r\n    for (var i = arr1.length; i--;) {\r\n        if (arr1[i] !== arr2[i])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Resets stored data\r\nexport function resetData() {\r\n\r\n    document.querySelector('.reset').addEventListener('click', (e) => {\r\n        e.preventDefault;\r\n        localforage.clear();\r\n        cl('APP RESET');\r\n    })\r\n}\r\n\r\n\r\n// Adds click functionality to selectors\r\nexport function clickListener(elements, clickFunction) {\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n        elements[i].addEventListener(\"click\", () => { clickFunction(i) });\r\n    }\r\n}","// App data\r\n\r\nexport default {\r\n\r\n    terms: {\r\n        verb_1: { term: \"verb_1\", definition: \"ans_1\" },\r\n        verb_2: { term: \"verb_2\", definition: \"ans_2\" },\r\n        verb_3: { term: \"verb_3\", definition: \"ans_3\" },\r\n        verb_4: { term: \"verb_4\", definition: \"ans_4\" },\r\n        verb_5: { term: \"verb_5\", definition: \"ans_5\" }\r\n    }\r\n}\r\n","\r\n// Imports\r\nimport { cl, clv } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport { getListOfTerms, updateDataCount };\r\n\r\n// Creates a list of terms\r\nconst getListOfTerms = function getListOfTerms() {\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let listOfTerms = [];\r\n    let scannedTerms = [];\r\n    const dataLength = Object.keys(appData.terms).length;\r\n\r\n    // Prevent overflow\r\n    if (ops.displayedTerms > dataLength) {\r\n        ops.displayedTerms = dataLength;\r\n    }\r\n\r\n    // First time app opened\r\n    if (ops.storedData.firstTime === undefined) {\r\n\r\n        while (i < ops.displayedTerms) {\r\n            let pickedTerm = pickRandom();\r\n\r\n            // Ensure term hasn't been already scanned\r\n            if (!listOfTerms.includes(pickedTerm)) {\r\n                listOfTerms.push(pickedTerm);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    // App opened before\r\n    else {\r\n\r\n        while (i < ops.displayedTerms) {\r\n            let viewedLength = Object.keys(ops.storedData.viewedTerms).length;\r\n\r\n            // If all terms viewed\r\n            if (viewedLength === dataLength) {\r\n\r\n                let viewedSorted = [];\r\n\r\n                // Convert viewed terms to array\r\n                for (let term in ops.storedData.viewedTerms) {\r\n                    viewedSorted.push([term, ops.storedData.viewedTerms[term]])\r\n                }\r\n\r\n                // Sort array by view count\r\n                viewedSorted.sort((a, b) => {\r\n                    return a[1] - b[1]\r\n                })\r\n\r\n                // Finish off iterator with lowest viewed terms\r\n                while (i < ops.displayedTerms) {\r\n                    listOfTerms.push(viewedSorted[i][0]);\r\n                    i++;\r\n                }\r\n                // Overflow protection\r\n                i++;\r\n            }\r\n            else {\r\n                let pickedTerm = pickRandom();\r\n\r\n                // Ensure term hasn't been already scanned\r\n                if (!scannedTerms.includes(pickedTerm)) {\r\n                    scannedTerms.push(pickedTerm);\r\n\r\n                    // Ensure term not viewed before\r\n                    if (!ops.storedData.viewedTerms.hasOwnProperty(pickedTerm)) {\r\n                        listOfTerms.push(pickedTerm);\r\n                        ops.storedData.viewedTerms[pickedTerm] = 0;\r\n                        localforage.setItem('ops.storedData', ops.storedData);\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n            // Overflow protection\r\n            if (j > 1000) {\r\n                i = ops.displayedTerms;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // Get random terms from data\r\n    function pickRandom() {\r\n        let keys = Object.keys(appData.terms),\r\n            pickedTerm = keys[keys.length * Math.random() << 0];\r\n\r\n        return pickedTerm;\r\n    }\r\n    // Return final list of terms\r\n    return listOfTerms;\r\n}\r\n\r\n// Handles count of a type of data\r\nconst updateDataCount = function (dataType, termsToAdjust, baseValue) {\r\n\r\n    let dataTypeHolder = ops.storedData[dataType] || {};\r\n\r\n    // If no viewed data, create new \r\n    if (!ops.storedData.hasOwnProperty(dataType)) {\r\n\r\n        for (let value of termsToAdjust) {\r\n            dataTypeHolder[value] = baseValue;\r\n        }\r\n    }\r\n    // If viewed data exists\r\n    else {\r\n        // If viewed term exists, update count\r\n        for (let value of termsToAdjust) {\r\n\r\n            if (ops.storedData[dataType].hasOwnProperty(value)) {\r\n                let count = ops.storedData[dataType][value];\r\n                count += 1;\r\n                dataTypeHolder[value] = count;\r\n            }\r\n            else {\r\n                dataTypeHolder[termsToAdjust] = baseValue;\r\n            }\r\n        }\r\n    }\r\n    // Pass back final object\r\n    return dataTypeHolder;\r\n}","\r\n// Imports\r\nimport { cl, clv, clickListener, getTimeComplete } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { updateDataCount } from 'termCreation';\r\n\r\n// Exports\r\nexport { revealedBtnHandler, createRevealTimer };\r\n\r\n// Handles functions when reveal button clicked\r\nconst revealedBtnHandler = function revealedBtnHandler() {\r\n\r\n    let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n    clickListener(revealBtn, (i) => {\r\n\r\n        if (revealBtn[i].classList.contains('disabled')) {\r\n            return false;\r\n        }\r\n        let term = [revealBtn[i].parentNode.querySelector('.term-holder').innerHTML];\r\n\r\n        // Updates the revealed view counter\r\n        let countHolder = revealBtn[i].parentNode.querySelector('.term-views');\r\n        let definitionHolder = revealBtn[i].parentNode.querySelector('.definition-holder');\r\n        let count = parseInt(countHolder.innerHTML);\r\n\r\n        // Show definition\r\n        definitionHolder.classList.add('shown');\r\n\r\n        // Increase count by one\r\n        countHolder.innerHTML = count + 1;\r\n\r\n        // Pass to updateDataCount function\r\n        let dataCount = updateDataCount('revealedTermCount', term, 1);\r\n\r\n        // Set storedData\r\n        ops.storedData.revealedTermCount = dataCount;\r\n\r\n        // Starts a timer \r\n        createRevealTimer(revealBtn[i]);\r\n\r\n        // Save to storage\r\n        localforage.setItem('ops.storedData', ops.storedData);\r\n    });\r\n}\r\n\r\n// Adds a timer to the reveal button\r\nconst createRevealTimer = function createRevealTimer(revealBtn) {\r\n\r\n    // If no stored data for reveal countdowns\r\n    if (ops.storedData.revealCountdowns === undefined) {\r\n        ops.storedData.revealCountdowns = {};\r\n    }\r\n\r\n    let revealCountdowns = ops.storedData.revealCountdowns || {};\r\n    let term = [revealBtn.parentNode.querySelector('.term-holder').innerHTML];\r\n    let minutes;\r\n    let seconds;\r\n    let startTime;\r\n    \r\n    // New timer\r\n    if (revealCountdowns[term] === undefined) {\r\n\r\n        minutes = 59;\r\n        seconds = 59;\r\n        startTime = getTimeComplete();\r\n\r\n        // Set storedData\r\n        ops.storedData.revealCountdowns[term] = startTime;\r\n    }\r\n    // Existing timer\r\n    else {\r\n        let nowTime = getTimeComplete()[0];\r\n        let timerEnded = false;\r\n\r\n        // Get terms start time for countdown\r\n        startTime = revealCountdowns[term][0];\r\n\r\n        // Check remaining timer, format: startTime[day, month, hour, minute, second]\r\n\r\n        // If day or month are different\r\n        if (startTime[0] !== nowTime[0] || startTime[1] !== nowTime[1]) {\r\n            timerEnded = true;\r\n        }\r\n        // If more than 2 hours different\r\n        else if (Math.abs(startTime[2] - nowTime[2]) >= 2) {\r\n            timerEnded = true;\r\n        }\r\n        // If nowTime minutes less, indicates change of hour\r\n        else if (startTime[3] > nowTime[3]) {\r\n            // Remaining minutes in hour\r\n            minutes = startTime[3] - nowTime[3];\r\n            seconds = getRemainingSeconds();\r\n        }\r\n        // Else same hour, subtract remaining minutes\r\n        else {\r\n            minutes = 59 - (nowTime[3] - startTime[3]);\r\n            seconds = getRemainingSeconds();\r\n        }\r\n        // Calculate remaining seconds\r\n        function getRemainingSeconds() {\r\n            // If nowTime seconds less, indicates change of minute\r\n            if (startTime[4] > nowTime[4]) {\r\n                // Remaining seconds in minute\r\n                seconds = startTime[4] - nowTime[4];\r\n            }\r\n            // Else same minute, subtract remaining seconds\r\n            else {\r\n                seconds = 59 - (nowTime[4] - startTime[4]);\r\n            }\r\n            return seconds;\r\n        }\r\n\r\n        // Timer stopped, return to normal\r\n        if (timerEnded === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Set start time to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    // Sets a visual timer on the button\r\n    setInterval(() => {\r\n        let displayedMinutes = minutes;\r\n        let displayedSeconds = seconds;\r\n        let hiddenZero = '';\r\n\r\n        // Handle issues like zero index\r\n        if (seconds < 10 && seconds > 0) {\r\n            hiddenZero = '0';\r\n        }\r\n        if (seconds === 0) {\r\n            seconds = 60;\r\n            minutes -= 1;\r\n        }\r\n        if (seconds === 60) {\r\n            displayedSeconds = '00';\r\n        }\r\n\r\n        // Update DOM\r\n        revealBtn.innerHTML = (displayedMinutes + ':' + hiddenZero + displayedSeconds);\r\n        revealBtn.classList.add('disabled');\r\n        revealBtn.setAttribute(\"disabled\", true);\r\n\r\n        // Decrease timer\r\n        seconds -= 1;\r\n    }, 1000);\r\n}\r\n\r\n","\r\n// Imports\r\nimport { cl, clv } from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport { createRevealTimer } from 'termInteraction';\r\n\r\n// Exports\r\nexport { viewCreate };\r\n\r\n// Create app view\r\nconst viewCreate = function viewCreate(termsToCreate) {\r\n\r\n    let viewHTML = \"\";\r\n\r\n    // Create HTML for terms\r\n    for (let value of termsToCreate) {\r\n\r\n        // Get terms and definitions from data\r\n        let termValue = appData.terms[value].term;\r\n        let definitionValue = appData.terms[value].definition;\r\n        let revealCounter;\r\n        let viewsCount;\r\n\r\n        // Check storage for revealed count\r\n        if (ops.storedData.revealedTermCount === undefined) {\r\n            viewsCount = 0;\r\n        }\r\n        else {\r\n            viewsCount = ops.storedData.revealedTermCount[value] || 0;\r\n        }\r\n\r\n        // Create view\r\n        let newHolder =\r\n            `<div class=\"term-wrapper\">\r\n                <p class=\"term-holder\">${termValue}</p>\r\n                <p class=\"definition-holder\">${definitionValue}</p>\r\n                <p class=\"term-views\">${viewsCount}</p>\r\n                <button class=\"reveal\">Reveal definition</button>\r\n            </div>`;\r\n\r\n        viewHTML += newHolder;\r\n        // Cycle for of loop\r\n    }\r\n    // Add to view\r\n    ops.container.innerHTML = viewHTML;\r\n\r\n    // Add countdown timers to term buttons\r\n    for (let value of termsToCreate) {\r\n\r\n        // Check if timer data exists\r\n        if (ops.storedData.revealCountdowns !== undefined) {\r\n            \r\n            // Add countdown timers to buttons\r\n            if (ops.storedData.revealCountdowns[value] !== undefined) {\r\n\r\n                let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n                // Find button node that matches term in DOM\r\n                for (let i = 0; i < revealBtn.length; i++) {\r\n                    let revealTerm = revealBtn[i].parentNode.querySelector('.term-holder').innerHTML;\r\n\r\n                    if (revealTerm === value) {\r\n                        createRevealTimer(revealBtn[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}