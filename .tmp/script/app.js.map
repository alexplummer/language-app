{"version":3,"sources":["app.js","helperFunctions.js","verbs.js","termCreation.js","termInteraction.js","viewCreation.js"],"names":["app","ready","fn","document","readyState","addEventListener","cl","log","console","getTodaysDate","todayDate","day","Date","getDate","month","getMonth","push","arrayCheck","arr1","arr2","length","i","resetData","querySelector","e","preventDefault","localforage","clear","appData","terms","verb_1","term","definition","verb_2","verb_3","verb_4","verb_5","getListOfTerms","j","listOfTerms","scannedTerms","dataLength","Object","keys","ops","displayedTerms","storedData","firstTime","undefined","pickedTerm","pickRandom","includes","viewedLength","viewedTerms","viewedSorted","sort","a","b","hasOwnProperty","setItem","Math","random","updateDataCount","dataType","termsToAdjust","dataTypeHolder","value","count","createRevealedCount","revealBtn","querySelectorAll","parentNode","innerHTML","countHolder","parseInt","revealedTermCount","viewCreate","termsToCreate","viewHTML","termValue","definitionValue","viewsCount","newHolder","join","container","addDay","debug","openApp","then","numberOfKeys","initialise","catch","err","createTermsHandler","getItem","checkData","retrievedData","todaysDate","storedDate","addOneDay","Array","from","dateOpened","dailyTerms","pickedTerms","ops$1"],"mappings":"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","file":"app.js","sourcesContent":["\r\n// Imports\r\nimport {ready, cl, clv, resetData, arrayCheck, getTodaysDate} from 'helperFunctions';\r\nimport {getListOfTerms, updateDataCount} from 'termCreation';\r\nimport {createRevealedCount} from 'termInteraction';\r\nimport {viewCreate} from 'viewCreation';\r\n\r\n// Exports\r\nexport default ops;\r\n\r\n// Global options\r\nlet ops = {\r\n    displayedTerms: 3,\r\n    container: document.querySelector(\".container\"),\r\n    addDay: true,\r\n    debug: true,\r\n    storedData: {}\r\n}\r\n\r\n// Initialise modules on load\r\nready(function(){\r\n\t'use strict';\r\n\topenApp();\r\n    // Resets button\r\n    resetData();\r\n});\r\n\r\n// Runs when app opens\r\nconst openApp = function openApp() {\r\n\r\n    // Check if this is the first time app has run\r\n    localforage.length().then( numberOfKeys => {\r\n        \r\n        // If first time\r\n        if(numberOfKeys===0) {\r\n            firstTime();\r\n        }\r\n        // Not first time\r\n        else {\r\n            ops.storedData.firstTime = false;\r\n            initialise();\r\n        }\r\n    }).catch( err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\n// Runs if first time app has run\r\nconst firstTime = function firstTime() {\r\n    \r\n    // Create terms\r\n    createTermsHandler();\r\n\r\n    // Set first time to false\r\n    ops.storedData.firstTime = false;\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n}\r\n\r\n// Initialises app\r\nconst initialise = function initialise() {\r\n\r\n    // Get stored data\r\n    localforage.getItem('ops.storedData').then( retrievedData => {\r\n        checkData(retrievedData);\r\n    }).catch( err => {\r\n        console.log(err);\r\n    });\r\n\r\n    // Handle retrieved data\r\n    function checkData(retrievedData) {\r\n\r\n        // Set data in app from storage\r\n        ops.storedData = retrievedData;\r\n        \r\n        // Check if a new day\r\n        let todaysDate = getTodaysDate();\r\n        let storedDate = [];\r\n        let addOneDay = true;\r\n            \r\n        // Get date last stored\r\n        storedDate = Array.from(retrievedData.dateOpened);\r\n\r\n        // If same day, use dailyTerms data\r\n        if (arrayCheck(todaysDate, storedDate) === true) {\r\n            if (ops.addDay === true) {createTermsHandler();}\r\n            else {viewCreate(retrievedData.dailyTerms);}\r\n        }\r\n        // Else create new terms\r\n        else {\r\n            createTermsHandler();\r\n        }\r\n    }    \r\n}\r\n\r\n// Calls functions to handle term creation\r\nconst createTermsHandler = function createTermsHandler() {\r\n\r\n     // Get initial terms\r\n    let pickedTerms = getListOfTerms();\r\n\r\n    // Create initial view\r\n    viewCreate(pickedTerms);\r\n\r\n    // Create opened date, daily terms, viewed terms\r\n    ops.storedData.dateOpened = getTodaysDate();\r\n    ops.storedData.dailyTerms = pickedTerms;    \r\n    ops.storedData.viewedTerms = updateDataCount('viewedTerms', pickedTerms);\r\n\r\n    // Add to storage\r\n    localforage.setItem('ops.storedData', ops.storedData);\r\n\r\n    // Handles counter for revealed terms\r\n    createRevealedCount();\r\n\r\n    // Debug code\r\n    if (ops.debug === true){\r\n        cl(ops.storedData);\r\n        cl('Revealed terms count:');\r\n        cl(ops.storedData.revealedTermCount);\r\n        cl('Viewed terms count:');\r\n        cl(ops.storedData.viewedTerms);\r\n    };\r\n}\r\n\r\n","//- Global helper functions\r\n\r\n// JS ready\r\nexport function ready(fn) {\r\n\tif (document.readyState != 'loading'){\r\n\t\tfn();\r\n\t} else {\r\n\t\tdocument.addEventListener('DOMContentLoaded', fn);\r\n\t}\r\n}\r\n\r\n// Console log -> cl\r\nexport function cl(log) {\r\n\tconsole.log(log);\r\n}\r\n\r\n// Console log plus value\r\nexport function clv(term,log) {\r\n\tconsole.log(term+'= '+log);\r\n}\r\n\r\n// Creates array of day and month\r\nexport function getTodaysDate() {\r\n\r\n    // Set opened date to storedData\r\n    let todayDate = [],\r\n        day = new Date().getDate(),\r\n        month = new Date().getMonth();\r\n\r\n    todayDate.push(day);\r\n    todayDate.push(month);\r\n\r\n    return todayDate;\r\n}\r\n\r\n// Check if arrays are the same\r\nexport function arrayCheck(arr1, arr2) {\r\n\r\n    if(arr1.length !== arr2.length)\r\n        return false;\r\n    for(var i = arr1.length; i--;) {\r\n        if(arr1[i] !== arr2[i])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Resets stored data\r\nexport function resetData() {\r\n\r\n    document.querySelector('.reset').addEventListener('click', (e) => {\r\n        e.preventDefault;\r\n        localforage.clear();\r\n        cl('App reset');\r\n    })\r\n}\r\n","// App data\r\n\r\nexport default { \r\n\r\n    terms: {\r\n        verb_1: {term: \"verb_1\", definition: \"ans_1\"}, \r\n        verb_2: {term: \"verb_2\", definition: \"ans_2\"}, \r\n        verb_3: {term: \"verb_3\", definition: \"ans_3\"}, \r\n        verb_4: {term: \"verb_4\", definition: \"ans_4\"}, \r\n        verb_5: {term: \"verb_5\", definition: \"ans_5\"}\r\n    }\r\n}\r\n","\r\n// Imports\r\nimport {cl, clv} from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport {getListOfTerms, updateDataCount};\r\n\r\n// Creates a list of terms\r\nconst getListOfTerms = function getListOfTerms() {\r\n   \r\n    let i = 0;\r\n    let j = 0;\r\n    let listOfTerms = [];\r\n    let scannedTerms = [];\r\n    const dataLength = Object.keys(appData.terms).length;\r\n\r\n    // Prevent overflow\r\n    if (ops.displayedTerms > dataLength) {\r\n        ops.displayedTerms = dataLength;\r\n    }\r\n    \r\n    // First time app opened\r\n    if (ops.storedData.firstTime === undefined) {\r\n       \r\n        while (i<ops.displayedTerms) {\r\n        let pickedTerm = pickRandom();\r\n\r\n            // Ensure term hasn't been already scanned\r\n            if (!listOfTerms.includes(pickedTerm)) {\r\n                listOfTerms.push(pickedTerm);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    // App opened before\r\n    else {\r\n        \r\n        while (i<ops.displayedTerms) {\r\n            let viewedLength = Object.keys(ops.storedData.viewedTerms).length;\r\n            \r\n            // If all terms viewed\r\n            if (viewedLength === dataLength) {     \r\n                      \r\n                let viewedSorted = [];\r\n                \r\n                // Convert viewed terms to array\r\n                for (let term in ops.storedData.viewedTerms) {\r\n                    viewedSorted.push([term, ops.storedData.viewedTerms[term]])\r\n                }\r\n\r\n                // Sort array by view count\r\n                viewedSorted.sort( (a, b) => {\r\n                    return a[1] - b[1]\r\n                })\r\n\r\n                // Finish off iterator with lowest viewed terms\r\n                while (i<ops.displayedTerms) {\r\n                    listOfTerms.push(viewedSorted[i][0]);\r\n                    i++;\r\n                }\r\n                // Overflow protection\r\n                i++;\r\n            }\r\n            else {\r\n                let pickedTerm = pickRandom();\r\n                \r\n                // Ensure term hasn't been already scanned\r\n                if (!scannedTerms.includes(pickedTerm)) {\r\n                    scannedTerms.push(pickedTerm);\r\n \r\n                    // Ensure term not viewed before\r\n                    if (!ops.storedData.viewedTerms.hasOwnProperty(pickedTerm)) {\r\n                        listOfTerms.push(pickedTerm);\r\n                        ops.storedData.viewedTerms[pickedTerm] = 0;\r\n                        localforage.setItem('ops.storedData', ops.storedData);\r\n                        i++;\r\n                    }\r\n                }   \r\n            }\r\n            // Overflow protection\r\n            if (j > 1000) {\r\n                i = ops.displayedTerms;\r\n            }\r\n            j++;\r\n        }\r\n    }\r\n    // Get random terms from data\r\n    function pickRandom() {\r\n        let keys = Object.keys(appData.terms),\r\n            pickedTerm = keys[ keys.length * Math.random() << 0];\r\n\r\n        return pickedTerm;\r\n    }\r\n    // Return final list of terms\r\n    return listOfTerms;\r\n}\r\n\r\n// Handles count of a type of data\r\nconst updateDataCount = function(dataType, termsToAdjust) {\r\n\r\n let dataTypeHolder = ops.storedData[dataType] || {};\r\n     \r\n    // If no viewed data, create new \r\n    if (!ops.storedData.hasOwnProperty(dataType)) {\r\n       \r\n        for (let value of termsToAdjust) {   \r\n            dataTypeHolder[value] = 0;\r\n        }\r\n    }\r\n    // If viewed data exists\r\n    else {\r\n        // If viewed term exists, update count\r\n        for (let value of termsToAdjust) {   \r\n\r\n            if (ops.storedData[dataType].hasOwnProperty(value)) {\r\n                let count = ops.storedData[dataType][value];\r\n                count += 1;\r\n                dataTypeHolder[value] = count;\r\n            }\r\n            else {\r\n                dataTypeHolder[termsToAdjust] = 0;\r\n            }       \r\n        }\r\n    }\r\n    // Pass back final object\r\n    return dataTypeHolder;\r\n}","\r\n// Imports\r\nimport {cl, clv} from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\nimport {updateDataCount} from 'termCreation';\r\n\r\n// Exports\r\nexport {createRevealedCount};\r\n\r\n// Setup stored data\r\n\r\nconst createRevealedCount = function createRevealedCount() {\r\n    \r\n    let revealBtn = document.querySelectorAll('.reveal');\r\n\r\n    for (let i=0; i<revealBtn.length;i++) {\r\n        \r\n        revealBtn[i].addEventListener(\"click\", () => {\r\n            let term = [revealBtn[i].parentNode.querySelector('.term-holder').innerHTML];\r\n            let countHolder = revealBtn[i].parentNode.querySelector('.term-views');\r\n            let count = parseInt(countHolder.innerHTML);\r\n            \r\n            countHolder.innerHTML = count + 1;\r\n            ops.storedData.revealedTermCount = updateDataCount('revealedTermCount', term); \r\n            localforage.setItem('ops.storedData', ops.storedData);\r\n        });\r\n    }\r\n    \r\n}\r\n\r\n       ","\r\n// Imports\r\nimport {cl, clv} from 'helperFunctions';\r\nimport appData from 'verbs';\r\nimport ops from 'app';\r\n\r\n// Exports\r\nexport {viewCreate};\r\n\r\n// Create app view\r\nconst viewCreate = function viewCreate(termsToCreate) {\r\n\r\n    let viewHTML = [];\r\n\r\n    for (let value of termsToCreate) {\r\n        \r\n        // Get terms and definitions from data\r\n        let termValue       = appData.terms[value].term;\r\n        let definitionValue = appData.terms[value].definition;\r\n        let viewsCount;\r\n\r\n        if (ops.storedData.revealedTermCount === undefined) {\r\n            viewsCount = 0;\r\n        }\r\n        else {\r\n            viewsCount = ops.storedData.revealedTermCount[value] || 0;\r\n        }\r\n        \r\n        // Create view\r\n        let newHolder = \r\n            `<div class=\"term-wrapper\">\r\n                <p class=\"term-holder\">${termValue}</p>\r\n                <p class=\"definition-holder\">${definitionValue}</p>\r\n                <p class=\"term-views\">${viewsCount}</p>\r\n                <button class=\"reveal\">Reveal definition</button>\r\n            </div>`;\r\n\r\n        viewHTML.push(newHolder);\r\n        // Cycle for of loop\r\n    }\r\n    // Add to view\r\n    viewHTML = viewHTML.join('');\r\n    ops.container.innerHTML = viewHTML;\r\n}\r\n"]}